{"version":3,"file":"434.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,mCAkkB6E,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAlkB9F,mCA4qBqzB,cAAiB;;;;;;;;;IA5qBt0B,mCAqrB0Y,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IArrB3Z,mCAquBuuB,cAAiB;;;;;;;IAruBxvB,mCA4uB8T,cAAiB;;EA5uB/U;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;IAAA,mCA+yB6E,cAAiB;;IA/yB9F,mCA2zB6E,cAAiB;;IA3zB9F,mCAo0B6E,cAAiB;;EAp0B9F;EAAA;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,mCA09B6E,cAAiB;;IA19B9F,mCA49B6E,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA59B9F;EAAA;;;;;;;;;;;;IAAA,mCAqkC6E,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IArkC9F,mCAipC6E,cAAiB;;;;;;;;;;;IAjpC9F,mCAirC6E,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAjrC9F,mCA8jDI,uBAAyB;;IA9jD7B,mCAokDI,uBAAyB;;IApkD7B,mCAwkDI,uBAAyB;;IAxkD7B,mCA4kDI,uBAAyB;;IA5kD7B,mCAglDI,uBAAyB;;IAhlD7B,mCAolDI,uBAAyB;;IAplD7B,mCAwlDI,uBAAyB;;IAxlD7B,mCA4lDI,uBAAyB;;IA5lD7B,mCAgmDI,uBAAyB;;IAhmD7B,mCAomDI,uBAAyB;;;;;IApmD7B,mCAiqD6E,cAAiB;;;;;EAjqD9F;EAAA,ilCA68D6E,cAAiB;EA78D9F;EAAA;EAAA;EAAA;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,mCAsiFI,uBAAyB;;IAtiF7B,mCAuiFI,uBAAyB;;IAviF7B,mCAwiFI,uBAAyB;;IAxiF7B,mCA6iFI,uBAAyB;;IA7iF7B,mCA8iFI,uBAAyB;;IA9iF7B,mCA+iFI,uBAAyB;;IA/iF7B,mCAkjFI,uBAAyB;;IAljF7B,mCAmjFI,uBAAyB;;IAnjF7B,mCAojFI,uBAAyB;;IApjF7B,mCAujFI,uBAAyB;;IAvjF7B,mCAwjFI,uBAAyB;;IAxjF7B,mCAyjFI,uBAAyB;;IAzjF7B,mCA4jFI,uBAAyB;;IA5jF7B,mCA6jFI,uBAAyB;;IA7jF7B,mCA8jFI,uBAAyB;;IA9jF7B,mCAikFI,uBAAyB;;IAjkF7B,mCAkkFI,uBAAyB;;IAlkF7B,mCAmkFI,uBAAyB;;IAnkF7B,mCAskFI,uBAAyB;;IAtkF7B,mCAukFI,uBAAyB;;IAvkF7B,mCAwkFI,uBAAyB;;IAxkF7B,mCA2kFI,uBAAyB;;IA3kF7B,mCA4kFI,uBAAyB;;IA5kF7B,mCA6kFI,uBAAyB;;IA7kF7B,mCAglFI,uBAAyB;;IAhlF7B,mCAilFI,uBAAyB;;IAjlF7B,mCAklFI,uBAAyB;;IAllF7B,mCAwlF6E,cAAiB;;;;;;;;;;;;;;;;;;;;IAxlF9F,mCAkoF6E,cAAiB;;IAloF9F,mCAyqF6E,cAAiB;;;;;;;;;;;;;;;;;;EAzqF9F;EAAA;EAAA;EAAA;IAAA,mCAgzF6E,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAhzF9F,mCA44F6E,cAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA54F9F;EAAA;;;;;;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;EAAA;EAAA;IAAA,mCA0pG6E,cAAiB;;IA1pG9F,mCAqqG6E,cAAiB;;IArqG9F,mCA2rG6E,eAAkB;;EA3rG/F;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;u3CAAA,mCAsnH6E,cAAiB;EAtnH9F;EAAA,+tHAywH6E,cAAiB;;;;;;;AEzwHnB;AAC3E;;AAEA,CAAwG;AACxG,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,4CAAe","sources":["webpack://blog-demo/./docs/.vuepress/.temp/pages/前端面试手册/前端面试手册.html.js","webpack://blog-demo/./docs/.vuepress/.temp/pages/前端面试手册/前端面试手册.html.vue","webpack://blog-demo/./docs/.vuepress/.temp/pages/前端面试手册/前端面试手册.html.vue?f14f","webpack://blog-demo/./docs/.vuepress/.temp/pages/前端面试手册/前端面试手册.html.vue?7111"],"sourcesContent":["export const data = {\n  \"key\": \"v-0a97e47a\",\n  \"path\": \"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%8C/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%8C.html\",\n  \"title\": \"HTML基础\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"1. HTML 文件中的 DOCTYPE 是什么作用？\",\n      \"slug\": \"_1-html-文件中的-doctype-是什么作用\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"2. HTML、XML、XHTML 之间有什么区别？\",\n      \"slug\": \"_2-html、xml、xhtml-之间有什么区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"3. 前缀为 data- 开头的元素属性是什么？\",\n      \"slug\": \"_3-前缀为-data-开头的元素属性是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"4. 谈谈你对 HTML 语义化的理解？\",\n      \"slug\": \"_4-谈谈你对-html-语义化的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"5. HTML5 对比 HTML4 有哪些不同之处？\",\n      \"slug\": \"_5-html5-对比-html4-有哪些不同之处\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"6. meta 标签有哪些常用用法？\",\n      \"slug\": \"_6-meta-标签有哪些常用用法\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"7. img 标签的 srcset 的作用是什么？\",\n      \"slug\": \"_7-img-标签的-srcset-的作用是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"8. 响应式图片处理优化: Picture 标签\",\n      \"slug\": \"_8-响应式图片处理优化-picture-标签\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"9. 在 script 标签上使用 defer 和 async 的区别是什么？\",\n      \"slug\": \"_9-在-script-标签上使用-defer-和-async-的区别是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"10. 前端做本地数据存储的方式有哪些？\",\n      \"slug\": \"_10-前端做本地数据存储的方式有哪些\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"11. 以上几种前端存储的区别是什么？\",\n      \"slug\": \"_11-以上几种前端存储的区别是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"1. CSS选择器的优先级是怎么样的？\",\n      \"slug\": \"_1-css选择器的优先级是怎么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"2. 通过 CSS 的哪些方式可以实现隐藏页面上的元素？\",\n      \"slug\": \"_2-通过-css-的哪些方式可以实现隐藏页面上的元素\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"3. px、em、rem之间有什么区别？\",\n      \"slug\": \"_3-px、em、rem之间有什么区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"4. 让元素水平居中的方法有哪些？\",\n      \"slug\": \"_4-让元素水平居中的方法有哪些\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"5. 在 CSS 中有哪些定位方式？\",\n      \"slug\": \"_5-在-css-中有哪些定位方式\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"6. 如何理解 z-index？\",\n      \"slug\": \"_6-如何理解-z-index\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"7. 如何清除浮动 ？\",\n      \"slug\": \"_7-如何清除浮动\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"8. 谈谈你对 BFC 的理解？\",\n      \"slug\": \"_8-谈谈你对-bfc-的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"9. 什么是CSS Sprites以及它的好处？\",\n      \"slug\": \"_9-什么是css-sprites以及它的好处\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"10. 你对媒体查询的理解是什么样的？\",\n      \"slug\": \"_10-你对媒体查询的理解是什么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"11. 你对盒子模型的理解是什么样的？\",\n      \"slug\": \"_11-你对盒子模型的理解是什么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"12. 标准盒模型和怪异盒模型有哪些区别？\",\n      \"slug\": \"_12-标准盒模型和怪异盒模型有哪些区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"13. 说说伪类和伪元素的区别？\",\n      \"slug\": \"_13-说说伪类和伪元素的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"14. 谈谈你对 flex 的理解？\",\n      \"slug\": \"_14-谈谈你对-flex-的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"1. 解释下什么是变量声明提升？\",\n      \"slug\": \"_1-解释下什么是变量声明提升\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"2. JS 的参数是以什么方式进行传递的？\",\n      \"slug\": \"_2-js-的参数是以什么方式进行传递的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"3. JavaScript垃圾回收是怎么做的？\",\n      \"slug\": \"_3-javascript垃圾回收是怎么做的\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"3.1 内存的生命周期\",\n          \"slug\": \"_3-1-内存的生命周期\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.2 垃圾回收算法说明\",\n          \"slug\": \"_3-2-垃圾回收算法说明\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.3 引用计数\",\n          \"slug\": \"_3-3-引用计数\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.4 标记清除算法\",\n          \"slug\": \"_3-4-标记清除算法\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"4. 谈谈你对 JavaScript 作用域链的理解？\",\n      \"slug\": \"_4-谈谈你对-javascript-作用域链的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"5. 谈谈你对闭包的理解？\",\n      \"slug\": \"_5-谈谈你对闭包的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"6. JavaScript中数据类型的隐式转换规则(了解)\",\n      \"slug\": \"_6-javascript中数据类型的隐式转换规则-了解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"7. 谈谈你对原型链的理解？\",\n      \"slug\": \"_7-谈谈你对原型链的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"6. 谈谈对于继承的理解\",\n      \"slug\": \"_6-谈谈对于继承的理解\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"6.1 继承 - 原型继承\",\n          \"slug\": \"_6-1-继承-原型继承\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"6.2 继承 - 组合继承\",\n          \"slug\": \"_6-2-继承-组合继承\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"6.3 继承 - 寄生组合继承\",\n          \"slug\": \"_6-3-继承-寄生组合继承\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"6.4 es6 - class 实现继承 extends\",\n          \"slug\": \"_6-4-es6-class-实现继承-extends\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"8. 如何判断是否是数组？\",\n      \"slug\": \"_8-如何判断是否是数组\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"9. 谈谈你对this的理解？\",\n      \"slug\": \"_9-谈谈你对this的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"10. 箭头函数中的this指向什么？\",\n      \"slug\": \"_10-箭头函数中的this指向什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"11. Promise 的静态方法\",\n      \"slug\": \"_11-promise-的静态方法\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"12. 宏任务 微任务 是什么\",\n      \"slug\": \"_12-宏任务-微任务-是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"13. async/await是什么？\",\n      \"slug\": \"_13-async-await是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"14. 相较于 Promise，async/await有何优势？\",\n      \"slug\": \"_14-相较于-promise-async-await有何优势\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"15. 深拷贝 浅拷贝\",\n      \"slug\": \"_15-深拷贝-浅拷贝\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"1. HTTP有哪些⽅法？\",\n      \"slug\": \"_1-http有哪些方法\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"2. 各个HTTP方法的具体作用是什么？\",\n      \"slug\": \"_2-各个http方法的具体作用是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"3. GET方法和POST方法有何区别？\",\n      \"slug\": \"_3-get方法和post方法有何区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"4. HTTP请求报文是什么样的？\",\n      \"slug\": \"_4-http请求报文是什么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"5. HTTP响应报文是什么样的？\",\n      \"slug\": \"_5-http响应报文是什么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"6. 你了解的HTTP状态码有哪些？\",\n      \"slug\": \"_6-你了解的http状态码有哪些\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"7. HTTP的keep-alive是什么作用？\",\n      \"slug\": \"_7-http的keep-alive是什么作用\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"8. 为什么需要HTTPS？\",\n      \"slug\": \"_8-为什么需要https\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"9. HTTPS是如何保证安全的？\",\n      \"slug\": \"_9-https是如何保证安全的\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"9.1 什么是对称加密？\",\n          \"slug\": \"_9-1-什么是对称加密\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"9.2 什么是⾮对称加密？\",\n          \"slug\": \"_9-2-什么是非对称加密\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"9.3 HTTPS 加密解决⽅案\",\n          \"slug\": \"_9-3-https-加密解决方案\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"9.4 数字证书\",\n          \"slug\": \"_9-4-数字证书\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"9.5 数字签名\",\n          \"slug\": \"_9-5-数字签名\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"10. HTTP2和HTTP1.x比，有什么优势和特点？\",\n      \"slug\": \"_10-http2和http1-x比-有什么优势和特点\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"11. http缓存控制\",\n      \"slug\": \"_11-http缓存控制\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"11.1 基本认知\",\n          \"slug\": \"_11-1-基本认知\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"11.2 强缓存  (食品过期时间判断)\",\n          \"slug\": \"_11-2-强缓存-食品过期时间判断\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"11.3 协商缓存 (找供货商专家协商)\",\n          \"slug\": \"_11-3-协商缓存-找供货商专家协商\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"11.4 整体请求缓存流程\",\n          \"slug\": \"_11-4-整体请求缓存流程\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"TCP的特性\",\n      \"slug\": \"tcp的特性\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"简述 TCP 和 UDP 的区别\",\n      \"slug\": \"简述-tcp-和-udp-的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是 TCP 粘包，怎么处理？\",\n      \"slug\": \"什么是-tcp-粘包-怎么处理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"你知道哪些常用的端口号，以及它们对应的服务？\",\n      \"slug\": \"你知道哪些常用的端口号-以及它们对应的服务\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"一次完整的HTTP服务过程是什么\",\n      \"slug\": \"一次完整的http服务过程是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是DNS 解析\",\n      \"slug\": \"什么是dns-解析\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是三次握手？\",\n      \"slug\": \"什么是三次握手\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是四次挥手？\",\n      \"slug\": \"什么是四次挥手\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"TCP 三次握手理解 (双方确认)\",\n      \"slug\": \"tcp-三次握手理解-双方确认\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"关闭TCP连接四次挥手的理解 (客气挽留)\",\n      \"slug\": \"关闭tcp连接四次挥手的理解-客气挽留\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"浏览器解析响应\",\n      \"slug\": \"浏览器解析响应\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"DOM的事件模型是什么？\",\n      \"slug\": \"dom的事件模型是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"DOM的事件流是什么？\",\n      \"slug\": \"dom的事件流是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"说说什么是事件委托？\",\n      \"slug\": \"说说什么是事件委托\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"常见的浏览器内核有哪些？\",\n      \"slug\": \"常见的浏览器内核有哪些\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"浏览器是如何进行界面渲染的？\",\n      \"slug\": \"浏览器是如何进行界面渲染的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"浏览器是如何解析CSS选择器的？\",\n      \"slug\": \"浏览器是如何解析css选择器的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"DOM树是如何构建的？\",\n      \"slug\": \"dom树是如何构建的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"浏览器重绘与重排的区别是什么？\",\n      \"slug\": \"浏览器重绘与重排的区别是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何触发重排和重绘？\",\n      \"slug\": \"如何触发重排和重绘\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何避免重排或重绘？\",\n      \"slug\": \"如何避免重排或重绘\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"前端如何实现即时通讯？\",\n      \"slug\": \"前端如何实现即时通讯\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是浏览器的同源策略？\",\n      \"slug\": \"什么是浏览器的同源策略\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何实现跨域？\",\n      \"slug\": \"如何实现跨域\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Babel的原理是什么？\",\n      \"slug\": \"babel的原理是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何编写一个Babel插件？\",\n      \"slug\": \"如何编写一个babel插件\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"你们的Git工作流是什么样的？\",\n      \"slug\": \"你们的git工作流是什么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Git的rebase和merge的区别是什么？\",\n      \"slug\": \"git的rebase和merge的区别是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是MVVM？\",\n      \"slug\": \"什么是mvvm\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"MVVM的优缺点有哪些？\",\n      \"slug\": \"mvvm的优缺点有哪些\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"谈谈对Vue生命周期的理解？\",\n      \"slug\": \"谈谈对vue生命周期的理解\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"在Vue中网络请求应该放在哪个生命周期中发起？\",\n      \"slug\": \"在vue中网络请求应该放在哪个生命周期中发起\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Vue组件之间如何进行通信？\",\n      \"slug\": \"vue组件之间如何进行通信\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"computed和watch的区别是什么？\",\n      \"slug\": \"computed和watch的区别是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Vue双向绑定原理？\",\n      \"slug\": \"vue双向绑定原理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Object.defineProperty和Proxy的优缺点？\",\n      \"slug\": \"object-defineproperty和proxy的优缺点\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何理解Vue的响应式系统？\",\n      \"slug\": \"如何理解vue的响应式系统\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"基本原理\",\n          \"slug\": \"基本原理\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"观察者模式\",\n          \"slug\": \"观察者模式\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Vue中的key到底有什么用？\",\n      \"slug\": \"vue中的key到底有什么用\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"diff算法\",\n          \"slug\": \"diff算法\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"key的常见应用场景\",\n          \"slug\": \"key的常见应用场景\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"React最新的生命周期是怎么样的？\",\n      \"slug\": \"react最新的生命周期是怎么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"在React中网络请求应该放在哪个生命周期中发起？\",\n      \"slug\": \"在react中网络请求应该放在哪个生命周期中发起\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"setState是同步的还是异步的？\",\n      \"slug\": \"setstate是同步的还是异步的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"React中如何实现组件间的通信？\",\n      \"slug\": \"react中如何实现组件间的通信\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"React存在哪些性能优化手段？\",\n      \"slug\": \"react存在哪些性能优化手段\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"React中如何进行组件和逻辑的复用？\",\n      \"slug\": \"react中如何进行组件和逻辑的复用\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Mixin、HoC、Render props、React Hooks的优缺点分别是什么？\",\n      \"slug\": \"mixin、hoc、render-props、react-hooks的优缺点分别是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Redux的工作流程是怎么样的？\",\n      \"slug\": \"redux的工作流程是怎么样的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"react-redux这个库是如何工作的？\",\n      \"slug\": \"react-redux这个库是如何工作的\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Redux和Mobx的区别？\",\n      \"slug\": \"redux和mobx的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"在Redux中如何进行异步操作？\",\n      \"slug\": \"在redux中如何进行异步操作\",\n      \"children\": []\n    }\n  ],\n  \"git\": {}\n}\n","<h1 id=\"html基础\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#html基础\" aria-hidden=\"true\">#</a> HTML基础</h1>\n<h2 id=\"_1-html-文件中的-doctype-是什么作用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-html-文件中的-doctype-是什么作用\" aria-hidden=\"true\">#</a> 1. HTML 文件中的 DOCTYPE 是什么作用？</h2>\n<p>HTML超文本标记语言: 是一个标记语言, 就有对应的语法标准</p>\n<p>DOCTYPE 即 Document Type，网页文件的文档类型标准。</p>\n<p>主要作用是告诉浏览器的解析器要使用哪种  <strong>HTML规范</strong> 或 <strong>XHTML规范</strong> 来解析页面。</p>\n<p>DOCTYPE 需要放置在 HTML 文件的 <code>&lt;html&gt;</code>标签之前，如：</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span> (目前主流)\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span> (早期)\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h2 id=\"_2-html、xml、xhtml-之间有什么区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-html、xml、xhtml-之间有什么区别\" aria-hidden=\"true\">#</a> 2. HTML、XML、XHTML 之间有什么区别？</h2>\n<p>它们都属于标记语言。</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>中文名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTML4</td>\n<td>超文本标记语言</td>\n<td>主要用于做界面呈现。HTML 是先有实现，后面才慢慢制定标准的，导致HTML⾮常混乱和松散，语法非常的不严谨。</td>\n</tr>\n<tr>\n<td>XML</td>\n<td>可扩展标记语言</td>\n<td>主要⽤于存储数据和结构。语法严谨，可扩展性强。由于 JSON 也有类似作⽤但更轻量⾼效， XML 的市场变得越来越⼩。</td>\n</tr>\n<tr>\n<td>XHTML</td>\n<td>可扩展超文本标记语言</td>\n<td>属于加强版 HTML，为解决 HTML 的混乱问题而生，在语法方面变得和 XML 一样严格。另外，XHTML 的出现也催生了 HTML 5，让HTML向规范化严谨化过渡。</td>\n</tr>\n<tr>\n<td>HTML5</td>\n<td>超文本标记语言</td>\n<td>在HTML的基础上进行拓展，用于页面呈现 (目前标准)</td>\n</tr>\n</tbody>\n</table>\n<p>XML的要求会比较严格:</p>\n<ol>\n<li>\n<p>有且只能有一个根元素</p>\n</li>\n<li>\n<p>大小写敏感</p>\n</li>\n<li>\n<p>正确嵌套</p>\n</li>\n<li>\n<p>必须双引号</p>\n</li>\n<li>\n<p>必须闭合标签</p>\n<p>...</p>\n</li>\n</ol>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>father</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>box<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">小张</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>child</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">小王</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>child</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>father</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><p>XHTML 和 HTML5 的历史延展: https://www.cnblogs.com/my-freedom/p/5796915.html</p>\n<p><strong>番外:</strong> 所以 HTML5 是HTML的新一代标准, 所谓的 H5 工程师这一词, 其实是国产词, 泛指新一代的web开发工程师,</p>\n<p>具体H5工程师, 做什么工作方向, 还是要看需求 (比如: 移动端开发, PC端网页开发, H5小游戏开发....)</p>\n<h2 id=\"_3-前缀为-data-开头的元素属性是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-前缀为-data-开头的元素属性是什么\" aria-hidden=\"true\">#</a> 3. 前缀为 <code>data-</code> 开头的元素属性是什么？</h2>\n<p>这是一种为 HTML 元素添加额外数据信息的方式，被称为 <strong>自定义属性</strong>。</p>\n<p>我们可以直接在元素标签上声明这样的数据属性：</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mydiv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello,world<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-num</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>也可以使用 JavaScript 来操作元素的数据属性：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> mydiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mydiv'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 读取</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mydiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 写入</span>\nmydiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar!!!\"</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><p><strong>注意：在各种现代前端框架出现后，这种原生的自定义属性已经变得不太常用了, 以前的使用频率非常高, 所以我们知道即可。</strong></p>\n<p>例如: vue实现删除功能时需要 id, 可以直接传值</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in list<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">张三</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">18</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">体育好</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    &lt;button @click=\"del(item.id)\">删除</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">编辑</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><h2 id=\"_4-谈谈你对-html-语义化的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-谈谈你对-html-语义化的理解\" aria-hidden=\"true\">#</a> 4. 谈谈你对 HTML 语义化的理解？</h2>\n<p>考察核心点: 语义化的好处 (利于SEO, 可阅读性更好)</p>\n<p><strong>语义化之前：</strong></p>\n<p>在提倡语义化之前，你可能会使用各种各样的标签去实现同样的功能，比如：</p>\n<ul>\n<li>使用 span、div、p、a 等做文字, 做按钮</li>\n<li>使用 div 做一切</li>\n</ul>\n<p>从功能方面来说，这确实是不存在什么问题的，完全可以达到功能效果。但这不符合直觉，非常不友好：</p>\n<ul>\n<li>对人不友好：阅读代码的人不能一眼看出代码的功能</li>\n<li>对机器不友好：解析代码的程序不能很好的对这些元素进行分类处理</li>\n</ul>\n<p><strong>语义化之后：</strong></p>\n<p>为了解决上面说的问题，HTML5 规范提倡语义化标签，即使⽤恰当语义的 HTML 标签让⻚⾯具有良好的结构与含义，⽐如：</p>\n<ul>\n<li><code>&lt;p&gt;</code> 标签就代表段落</li>\n<li><code>&lt;article&gt;</code> 代表正⽂内容</li>\n<li><code>&lt;button&gt; </code>代表按钮</li>\n<li><code>&lt;header&gt;</code> 代表头部</li>\n<li>等等...</li>\n</ul>\n<p>语义化的好处：</p>\n<table>\n<thead>\n<tr>\n<th>对开发者的好处</th>\n<th>对机器/程序的好处</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>使⽤了语义化标签的程序，可读性明显增强，开发者可以比容易和清晰地看出⽹⻚的结构；这也更利于整个开发团队的协作开发和后续维护工作</td>\n<td>带有语义的网页代码在⽂字类应用上的表现⼒丰富，利于搜索引擎爬⾍程序来爬取和提取出有效的信息；语义化标签还⽀持读屏软件，根据⽂章可以⾃动⽣成⽬录等，方便特殊人群无障碍的使用这些网页程序。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>语义化的适用性：</strong></p>\n<p>语义化适合内容型的网站来使用（如简书、知乎），对其⽹站内容的传播有很⼤帮助。</p>\n<h2 id=\"_5-html5-对比-html4-有哪些不同之处\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-html5-对比-html4-有哪些不同之处\" aria-hidden=\"true\">#</a> 5. HTML5 对比 HTML4 有哪些不同之处？</h2>\n<p><strong>考察点: 是否了解 html5 新增的一些新特性</strong></p>\n<table>\n<thead>\n<tr>\n<th>不同点</th>\n<th>备注说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>只有一种 DOCTYPE ⽂件类型声明(统一标准)</td>\n<td><code>&lt;!DOCTYPE html&gt;</code></td>\n</tr>\n<tr>\n<td>增加了一些新的标签元素(功能, 语义化)</td>\n<td><strong>section</strong>, <strong>video</strong>, progress, <strong>nav</strong>, meter, time, <strong>aside</strong>, <br/><strong>canvas</strong>, command, datalist, details, embed, figcaption, <br/>figure, <strong>footer</strong>, <strong>header</strong>, hgroup...</td>\n</tr>\n<tr>\n<td>input 支持了几个新的类型值</td>\n<td><code>date, email, url</code> 等等</td>\n</tr>\n<tr>\n<td>新增了一些标签属性</td>\n<td>charset（⽤于 meta 标签）；async（⽤于 script 标签）</td>\n</tr>\n<tr>\n<td>新增的全域属性</td>\n<td>contenteditable, draggable... <br/>hidden...</td>\n</tr>\n<tr>\n<td>新增API</td>\n<td>本地存储, 地理定位, Canvas绘图, 拖拽API, 即时通信WebSocket...</td>\n</tr>\n</tbody>\n</table>\n<p>获取地理定位: navigator.geolocation.getCurrentPosition(successCallback, errorCallback) (为了安全, 需要在 https 网站使用)</p>\n<p>记忆角度: 更标准, 新增标签, 新增type表单属性, 新增全域属性, 新增API...</p>\n<h2 id=\"_6-meta-标签有哪些常用用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-meta-标签有哪些常用用法\" aria-hidden=\"true\">#</a> 6. meta 标签有哪些常用用法？</h2>\n<p><code>&lt;meta&gt;</code> 标签的具体功能一般由 name/http-equiv 和 content 两部分属性来定义。</p>\n<ul>\n<li>如果设置 name 属性，则它描述的是网页文档的信息（例如：作者、⽇期和时间、⽹⻚描述、 关键词）</li>\n<li>如果设置 http-equiv 属性，则它描述的相当于是 HTTP 响应头信息（例如：网页内容信息, 网页缓存等）</li>\n</ul>\n<p><strong>一些常用的功能及写法：</strong></p>\n<ol>\n<li>设置网页关键词 (SEO)</li>\n</ol>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>电商,好货,便宜<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><ol start=\"2\">\n<li>设置网页视口（viewport）控制视⼝的⼤⼩、缩放和⽐例等 (移动端开发)</li>\n</ol>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1, maximum-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><ol start=\"3\">\n<li>设置 http 响应头：Content-Type 网页内容类型  (字符集)</li>\n</ol>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html;charset=utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- 设置字符集可简写为 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h2 id=\"_7-img-标签的-srcset-的作用是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_7-img-标签的-srcset-的作用是什么\" aria-hidden=\"true\">#</a> 7. img 标签的 srcset 的作用是什么？</h2>\n<p><strong>考察点: 处理响应式图片的方式</strong> (css媒体查询换的是背景图片, 而不是 img 标签的 src)</p>\n<p>开发者和设计师们竞相寻求 <strong>处理响应式图片</strong> 的方法。这的确是一个<a href=\"https://css-tricks.com/responsive-images-hard/\" target=\"_blank\" rel=\"noopener noreferrer\">棘手的问题<ExternalLinkIcon/></a> ，因为我们对同一个网站在众多设备宽度下，</p>\n<p>使用同一图像源。你愿意在一个大显示屏上显示模糊地、马赛克状的图像？</p>\n<p>你愿意在你的手机上加载一个巨大的（虽然更漂亮的）图像？这个问题令人左右为难。 <a href=\"https://www.jiangweishan.com/article/response-srcset-sizes.html\" target=\"_blank\" rel=\"noopener noreferrer\">博客链接<ExternalLinkIcon/></a></p>\n<p>其实通过使用 img 标签的 srcset 属性，可定义一组额外的图片集合，让浏览器根据不同的屏幕状况选取合适的图片来显示。</p>\n<blockquote>\n<p>也就是图片的响应式处理能力。</p>\n</blockquote>\n<p>如果你的响应式需求比较简单，只需要针对屏幕的不同 dpr （device pixel ratio，设备像素比）来决定图片的显示的话，</p>\n<p>dpr 设备像素比, 越高, 能够显示的越清晰  (dpr: 2, dpr: 3)</p>\n<p>那么就只要这么写：</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>320.png 1x, 640.png 2x, 960.png 3x<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>对于可变宽度的图像，我们使用<code>srcset</code>搭配<code>w</code>描述符以及<code>sizes</code>属性 。</p>\n<ul>\n<li>\n<p><code>w</code>描述符告诉浏览器列表中的每个图象的宽度。</p>\n</li>\n<li>\n<p><code>sizes</code>属性需要至少包含两个值，是由逗号分隔的列表。</p>\n</li>\n</ul>\n<p>根据最新规范，如果<code>srcset</code>中任何图像使用了<code>w</code>描述符，那么必须要设置<code>sizes</code>属性。</p>\n<p><code>sizes</code>属性有两个值：</p>\n<ol>\n<li>\n<p>第一个是媒体查询条件；</p>\n</li>\n<li>\n<p>第二个是图片对应的尺寸值，</p>\n<p>在特定媒体条件下，此值决定了图片的宽度。</p>\n<p>需要注意是，源图尺寸值不能使用百分比，如果要用100%,  <code>vw</code>是唯一可用的CSS单位。</p>\n</li>\n</ol>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img元素srcset属性浅析<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n    320.png 320w, \n    480.png 480w, \n    640.png 640w<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n    (max-width: 320px) 100vw, \n    (max-width: 360px) 320px,\n    (max-width: 480px) 360px,\n    (max-width: 640px) 480px,\n    640px<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>640.png<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div></div><p>为 img 定义以上属性后，浏览器的工作流程如下：</p>\n<ol>\n<li>检查设备的实际宽度</li>\n<li>检查 img 标签的 sizes 属性中定义的媒体查询条件列表，并计算哪个条件最先匹配到</li>\n<li>得到图片此时的响应式宽度</li>\n<li>加载 srcset 中最接近, 最适合媒体查询匹配到的宽度的图片</li>\n</ol>\n<p>注意: 测试时, 清除缓存测试, 因为一旦加载了高清图, 就不会也没有必要, 回过去再用小图替换了</p>\n<p>且我们无法确定究竟显示哪张图像，因为每个浏览器根据我们提供的信息挑选适当图像的算法是有差异的。</p>\n<p>(译者注：srcset和size列表是对浏览器的一个建议(hint)，而非指令。由浏览器根据其能力、网络等因素来决定。)</p>\n<h2 id=\"_8-响应式图片处理优化-picture-标签\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_8-响应式图片处理优化-picture-标签\" aria-hidden=\"true\">#</a> 8. 响应式图片处理优化: Picture 标签</h2>\n<p><strong>考察点: 响应式图片处理</strong></p>\n<p><code>picture</code>元素就像是图像和其源的容器。浏览器仍然需要<code>img</code>元素，用来表明需要加载的图片</p>\n<p>在 <code>&lt;picture&gt;</code> 下可放置零个或多个<code>&lt;source&gt;</code>标签、以及一个<code>&lt;img&gt;</code>标签，为不同的屏幕设备和场景显示不同的图片。</p>\n<p>如果source匹配到了, 就会优先用匹配到的, 如果没有匹配到会往下继续找</p>\n<p>使用<code>picture</code>元素选择图像，不会有歧义。</p>\n<p>浏览器的工作流程如下：</p>\n<ul>\n<li>\n<p>浏览器会先根据当前的情况，去匹配和使用<code>&lt;source&gt;</code>提供的图片</p>\n</li>\n<li>\n<p>如果未匹配到合适的<code>&lt;source&gt;</code>，就使用<code>&lt;img&gt;</code>标签提供的图片</p>\n</li>\n</ul>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>640.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(min-width: 640px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>480.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(min-width: 480px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>320.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><h2 id=\"_9-在-script-标签上使用-defer-和-async-的区别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-在-script-标签上使用-defer-和-async-的区别是什么\" aria-hidden=\"true\">#</a> 9. 在 script 标签上使用 defer 和 async 的区别是什么？</h2>\n<p><strong>明确: defer 和 async 的使用, 可以用于提升网页性能</strong></p>\n<p>script标签存在两个属性，defer和async，因此 script标签 的使用分为三种情况：</p>\n<ol>\n<li>\n<p><code>&lt;script src=&quot;example.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>没有defer或async属性，浏览器会立即加载并执行相应的脚本。</p>\n<p>不等待后续加载的文档元素，读到就开始加载和执行，此举会阻塞后续文档的加载</p>\n</li>\n<li>\n<p><code>&lt;script async src=&quot;example.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>有了async属性，表示后续文档的加载和渲染与js脚本的加载和执行是并行进行的，即异步执行；</p>\n</li>\n<li>\n<p><code>&lt;script defer src=&quot;example.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>有了defer属性，加载后续文档的过程和js脚本的加载是并行进行的(异步)，此时的js脚本仅加载不执行, js脚本的执行需要等到文档所有元素解析完成之后，DOMContentLoaded事件触发执行之前。</p>\n</li>\n</ol>\n<p>下图是使用了 defer、async、和未使用时的运行情况对比：</p>\n<img src=\"\\images\\image-20210209172314832.png\" alt=\"image-20210209172314832\" />\n<blockquote>\n<p>【上图的图例说明】</p>\n<p>绿线：HTML 的解析时间</p>\n<p>蓝线：JS 脚本的加载时间</p>\n<p>红色：JS 脚本的执行时间</p>\n</blockquote>\n<p>从图中我们可以明确一下几点：</p>\n<p>1.defer和async在网络加载过程是一致的，都是异步执行的；(放在页面顶部, 也不会阻塞页面的加载, 与页面加载同时进行)</p>\n<p>2.两者的区别, 脚本加载完成之后, async是立刻执行, defer会等一等 (等前面的defer脚本执行, 等dom的加载)</p>\n<p>所以, js脚本加上 async 或 defer, 放在头部可以减少网页的下载加载时间, 如果不考虑兼容性, 可以用于优化页面加载的性能</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.0/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><h2 id=\"_10-前端做本地数据存储的方式有哪些\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_10-前端做本地数据存储的方式有哪些\" aria-hidden=\"true\">#</a> 10. 前端做本地数据存储的方式有哪些？</h2>\n<img src=\"\\images\\image-20210209174438863.png\" alt=\"image-20210209174438863\" />\n<ol>\n<li>Cookies</li>\n<li>localStorage</li>\n<li>sessionStorage</li>\n<li>Web SQL</li>\n<li>IndexedDB</li>\n</ol>\n<h2 id=\"_11-以上几种前端存储的区别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-以上几种前端存储的区别是什么\" aria-hidden=\"true\">#</a> 11. 以上几种前端存储的区别是什么？</h2>\n<table>\n<thead>\n<tr>\n<th>方式名称</th>\n<th>标准说明</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cookies</td>\n<td>HTML5 前加入</td>\n<td>1.会为每个请求自动携带所有的Cookies数据，比较方便，但是也是缺点，浪费流量；<br>2.每个domain(站点)限制存储20个cookie；<br/>3.容量只有4K<br/>4.浏览器API比较原始，需要自行封装操作。 (js-cookie)</td>\n</tr>\n<tr>\n<td>localStorage</td>\n<td>HTML5 加入</td>\n<td>1.兼容IE8+，操作方便；<br/>2.永久存储，除非手动删除；<br/>3.容量为5M</td>\n</tr>\n<tr>\n<td>sessionStorage</td>\n<td>HTML5 加入</td>\n<td>1.功能基本与 localStorage 相似，但当前页面关闭后即被自动清理；<br/>2.与Cookies、localStorage 不同点是不能在所有同源窗口间共享，属于会话级别的存储</td>\n</tr>\n<tr>\n<td>Web SQL</td>\n<td>非标准功能</td>\n<td>1.2010年已被废弃，但一些主流浏览器中都有相关的实现；<br/>2.类似于 SQLite 数据库，是一种真正意义上的关系型数据库，⽤SQL进⾏操作；</td>\n</tr>\n<tr>\n<td>IndexedDB</td>\n<td>HTML5 加入</td>\n<td>1.是一种 NoSQL 数据库，⽤键值对进⾏储存，可进⾏快速读取操作；<br/>2.适合复杂 Web存储场景，⽤JS操作⽅便 (前端大量存数据的场景较少, 如果有, 可以用) <br />3.存储空间容量, 大于等于 250MB，甚至没有上限</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"css基础\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#css基础\" aria-hidden=\"true\">#</a> CSS基础</h1>\n<h2 id=\"_1-css选择器的优先级是怎么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-css选择器的优先级是怎么样的\" aria-hidden=\"true\">#</a> 1. CSS选择器的优先级是怎么样的？</h2>\n<p><strong>CSS选择器的优先级顺序：</strong></p>\n<p><code>内联样式</code> &gt; <code>ID选择器</code> &gt; <code>类选择器</code> &gt; <code>标签选择器</code></p>\n<p><strong>优先级的计算：</strong></p>\n<p>优先级是由 A、B、C、D 四个值来决定的，具体计算规则如下</p>\n<ul>\n<li>A={如果存在内联样式则为1，否则为0}</li>\n<li>B={ID选择器出现的次数}</li>\n<li>C={类选择器、属性选择器、伪类选择器出现的总次数}</li>\n<li>D={标签选择器、伪元素选择器出现的总次数}</li>\n</ul>\n<p><strong>计算示例：</strong></p>\n<p>样式一：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token comment\">/*\n  A=0   不存在内联样式\n  B=0   不存在ID选择器\n  C=1   有一个类选择器\n  D=3   有三个标签选择器\n\n  最终计算结果：{0,0,1,3}\n*/</span>\n<span class=\"token selector\">div ul li .red</span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>样式二：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token comment\">/*\n  A=0   不存在内联样式\n  B=1   有一个ID选择器\n  C=0   不存在类选择器\n  D=0   不存在标签选择器\n\n  最终计算结果：{0,1,0,0}\n*/</span>\n<span class=\"token selector\">#mydiv</span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>计算完成后，我们通过从A到D的顺序进行值的大小比较，权重由A到D从高到低，只要比较出最大值即可。例如上面的两个样式：</p>\n<div class=\"language-markdown ext-md line-numbers-mode\"><pre v-pre class=\"language-markdown\"><code><span class=\"token list punctuation\">1.</span> 样式一的A=0，样式二的A=0  【相等，继续往下比较】\n<span class=\"token list punctuation\">2.</span> 样式一的B=0 &lt; 样式二的B=1 【样式二的大，不继续往下比了，即认为样式二的优先级更高】\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><h2 id=\"_2-通过-css-的哪些方式可以实现隐藏页面上的元素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-通过-css-的哪些方式可以实现隐藏页面上的元素\" aria-hidden=\"true\">#</a> 2. 通过 CSS 的哪些方式可以实现隐藏页面上的元素？</h2>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>opacity: 0</td>\n<td>通过将元素的透明度设置为0，实现看起来隐藏的效果；但是依然会占用空间并可以进行交互</td>\n</tr>\n<tr>\n<td>visibility: hidden</td>\n<td>与透明度为0的方案非常类似，会占据空间，但不可以进行交互</td>\n</tr>\n<tr>\n<td>overflow: hidden</td>\n<td>只会隐藏元素溢出的部分；占据空间且不可交互</td>\n</tr>\n<tr>\n<td>display: none</td>\n<td>可以彻底隐藏元素并从文档流中消失，不占据空间也不能交互，且不影响布局</td>\n</tr>\n<tr>\n<td>z-index: -9999</td>\n<td>通过将元素的层级置于最底层，让其他元素覆盖住它，达到看起来隐藏的效果</td>\n</tr>\n<tr>\n<td>transform: scale(0,0)</td>\n<td>通过将元素进行缩放，缩小为0；依然会占据空间，但不可交互</td>\n</tr>\n<tr>\n<td>left: -9999px</td>\n<td>通过将元素定位到屏幕外面，达到看起来看不到的效果</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_3-px、em、rem之间有什么区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-px、em、rem之间有什么区别\" aria-hidden=\"true\">#</a> 3. px、em、rem之间有什么区别？</h2>\n<p><strong>考察点: 相对单位, 绝对单位, 以及适配问题</strong></p>\n<table>\n<thead>\n<tr>\n<th>单位名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>绝对单位。代表像素数量，页面会按照给出的精确像素进行展示</td>\n</tr>\n<tr>\n<td>em</td>\n<td>相对单位。默认的基准点为父元素的字体大小，而如果自身定义了字体大小则按自身的来算。所以即使在同一个页面内，1em可能不是一个固定的值。</td>\n</tr>\n<tr>\n<td>rem</td>\n<td>相对单位。可以理解为 <code>root em</code>，即基准点为根元素<code>&lt;html&gt;</code>的字体大小。rem是CSS3中新增单位，Chrome/FireFox/IE9+都支持, 一般用于做移动端适配</td>\n</tr>\n</tbody>\n</table>\n<p>正常开发 px 使用率较高, 如果要做 rem 适配, 会用到 rem 单位!</p>\n<p>rem布局的原理:</p>\n<ol>\n<li>使用 rem 为单位</li>\n<li>动态的设置 html font-size (媒体查询, js设置, 插件设置都可以)</li>\n</ol>\n<p>webpack有工具, 可以写 px, 自动转 rem  https://youzan.github.io/vant/#/zh-CN/advanced-usage</p>\n<h2 id=\"_4-让元素水平居中的方法有哪些\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-让元素水平居中的方法有哪些\" aria-hidden=\"true\">#</a> 4. 让元素水平居中的方法有哪些？</h2>\n<p><strong>方法一：使用 margin</strong></p>\n<p>通过为元素设置左右的 margin 为 auto，实现让元素居中。</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>本内容会居中<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><div class=\"language-scss ext-scss line-numbers-mode\"><pre v-pre class=\"language-scss\"><code><span class=\"token selector\">.center </span><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p><strong>方式二: 转成行内块,  给父盒子设置 text-align: center</strong></p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是内容盒子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p><strong>方法三：使用 flex 布局</strong></p>\n<p>使用 flex 提供的子元素居中排列功能，对元素进行居中。</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是内容盒子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p><strong>方式四: 使用定位布局</strong></p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是内容盒子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.center</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><p><a href=\"https://www.cnblogs.com/chengxs/p/11231906.html\" target=\"_blank\" rel=\"noopener noreferrer\">【更多方式参考】实现水平居中垂直居中<ExternalLinkIcon/></a></p>\n<h2 id=\"_5-在-css-中有哪些定位方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-在-css-中有哪些定位方式\" aria-hidden=\"true\">#</a> 5. 在 CSS 中有哪些定位方式？</h2>\n<p>也就是 position 样式的几个属性。</p>\n<p><strong>static 正常文档流定位</strong></p>\n<ul>\n<li>\n<p>此时设置 top、right、bottom、left 以及 z-index 都无效</p>\n</li>\n<li>\n<p>块级元素遵循从上往下纵向排列，行级元素遵循从左到右排列</p>\n</li>\n</ul>\n<p><strong>relative 相对定位</strong></p>\n<p>这个 <strong>“相对”</strong> 是指相对于正常文档流的位置。</p>\n<p><strong>absolute 绝对定位</strong></p>\n<p>当前元素相对于 **最近的非 static 定位的祖先元素 **来确定自己的偏移位置。</p>\n<p>例如，当前为 absolute 的元素的父元素、祖父元素都为 relative，则当前元素会相对于父元素进行偏移定位。</p>\n<p><strong>fixed 固定定位</strong></p>\n<p>当前元素相对于屏幕视口 viewport 来确定自己的位置。并且当屏幕滚动时，当前元素的位置也不会发生改变。</p>\n<p><strong>sticky 粘性定位</strong></p>\n<p>这个定位方式有点像 relative 和 fixed 的结合。当它的父元素在视口区域、并进入 top 值给定的范围内时，当前元素就以 fixed 的方式进行定位，否则就以 relative 的方式进行定位。</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.header</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.nav</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> sticky<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是头部<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是导航<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是主体部分8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br></div></div><h2 id=\"_6-如何理解-z-index\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-如何理解-z-index\" aria-hidden=\"true\">#</a> 6. 如何理解 z-index？</h2>\n<p>可以将它看做三维坐标系中的z轴方向上的图层层叠顺序。</p>\n<p>元素默认的 z-index 为 0，可通过修改 z-index 来控制设置了postion 值的元素的图层位置。</p>\n<img src=\"\\images\\image-20210209212043708.png\" alt=\"image-20210209212043708\" style=\"zoom:70%;\" />\n<p>可以将这种关系想象成一摞书本，通过 z-index 可以改变一本书在这摞书中的上下位置。</p>\n<p>z-index的小坑, 如果父辈元素有定位, 且配置了z-index, 优先按照父辈元素的定位的z-index进行比较层级</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.father</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.son</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 999<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.box2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br></div></div><h2 id=\"_7-如何清除浮动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_7-如何清除浮动\" aria-hidden=\"true\">#</a> 7. 如何清除浮动 ？</h2>\n<p><strong>考察: css基本功</strong></p>\n<p>可以有以下几种方式：</p>\n<ol>\n<li>\n<p>定高法</p>\n</li>\n<li>\n<p>使用一个空的div，并设置样式</p>\n</li>\n</ol>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><ol start=\"3\">\n<li>\n<p>为父元素添加 <code>overflow: hidden</code></p>\n</li>\n<li>\n<p>定义一个 clearfix 样式类</p>\n</li>\n</ol>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.clearfix:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  \t\t\t<span class=\"token comment\">/*设置内容为空*/</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>    \t\t\t<span class=\"token comment\">/*高度为0*/</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">/*行高为0*/</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">/*将文本转为块级元素*/</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/*将元素隐藏*/</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">/*清除浮动*/</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">/*为了兼容IE*/</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p>说明：当前 flex 已成为主流布局方式，适应性强, 且稳定, 所以浮动使用率目前已逐步降低。</p>\n<h2 id=\"_8-谈谈你对-bfc-的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_8-谈谈你对-bfc-的理解\" aria-hidden=\"true\">#</a> 8. 谈谈你对 BFC 的理解？</h2>\n<p><strong>什么是 BFC：</strong></p>\n<p>BFC 的全称是 Block Formatting Context，块级格式化上下文。这是一个用于在盒模型下布局块级盒子的独立渲染区域，</p>\n<p>将处于BFC区域内和区域外的元素进行互相隔离。</p>\n<p><strong>何时会形成 BFC：</strong></p>\n<p>满足下列条件之一就可触发BFC：</p>\n<ul>\n<li>HTML根元素</li>\n<li>position 值为 <code>absolute</code> 或 <code>fixed</code></li>\n<li>float 值不为 <code>none</code></li>\n<li>overflow 值不为 <code>visible</code></li>\n<li>display 值为 <code>inline-block</code>、<code>table-cell</code> 或 <code>table-caption</code></li>\n</ul>\n<p><strong>BFC 的应用场景：</strong></p>\n<ol>\n<li>场景一：防止两个相邻块级元素的上下 margin 发生重叠 (<strong>上下margin合并问题</strong>)</li>\n</ol>\n<p>属于同一 BFC 的, 两个相邻块级子元素的上下 margin 会重叠，如果想让它们不重叠，可通过让这两个相邻块级子元素分属于不同的BFC。</p>\n<p>以下示例代码中的两个盒子的上下外边距会重合（即它们都设置了10px的外边距，我们期望它们之间的间距是 20px，但实际效果却只有 10px）：</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.box1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 下外边距为 10px */</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">.box2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 上外边距为 10px */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div></div><img src=\"/images/image-20210217142711472.png\" alt=\"image-20210217142711472\" style=\"zoom:50%;\" />\n<p>下面我们让其中一个盒子触发BFC，从而达到间隔 20px 的期望效果：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.box2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 通过设置 display 为 inline-block 可以触发 BFC */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><img src=\"/images/image-20210217143506046.png\" alt=\"image-20210217143506046\" style=\"zoom:50%;\" />\n<ol start=\"2\">\n<li>场景二：<strong>清除浮动</strong></li>\n</ol>\n<p>以下示例代码中， 容器元素 box1 的高度会没有高：</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.box1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">.box2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello,world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello,world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello,world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div></div><p>而通过为 box1 添加 BFC 触发条件，可以让它的高度变回正常状态：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.box1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><ol start=\"3\">\n<li>场景三：<strong>实现自适应布局</strong>, 防止元素被浮动元素覆盖(左边固定, 右边自适应)</li>\n</ol>\n<p>以下示例中，box2 会被设置了浮动的 box1 覆盖：</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.box1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">.box2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div></div><img src=\"/images/image-20210217145325690.png\" alt=\"image-20210217145325690\" style=\"zoom:30%;\" />\n<p>要避免这种覆盖行为，可以让 box2 触发 BFC,  实现布局效果, 左边固定右边自适应：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.box2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 将 overflow 设置为非 visible 值可触发 BFC */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><img src=\"/images/image-20210217145504963.png\" alt=\"image-20210217145504963\" style=\"zoom:30%;\" />\n<p><a href=\"https://www.cnblogs.com/xiaohuochai/p/5248536.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：深入理解BFC<ExternalLinkIcon/></a></p>\n<h2 id=\"_9-什么是css-sprites以及它的好处\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-什么是css-sprites以及它的好处\" aria-hidden=\"true\">#</a> 9. 什么是CSS Sprites以及它的好处？</h2>\n<p><strong>考察: 性能优化的方案</strong></p>\n<p>CSS Sprites，俗称雪碧图、精灵图。这是一种CSS图片合并技术，就是将CSS中原先引用的一些较小的图片，合并成一张稍大的图片后再引用的技术方案。它可以减少请求多张小图片带来的网络消耗（因为发起的HTTP请求数变少了），并实现提前加载资源的效果。</p>\n<p><strong>操作方式：</strong></p>\n<p>可以手工使用图片编辑软件（如Photoshop），将多张小图片合并编辑变成一张大图片，并针对这张大图片，编写CSS样式来引用这张大图片中对应位置的小图片（涉及到的样式：background-image、background-position、background-size）。然后在HTML元素中使用这些样式即可。</p>\n<p>https://img.alicdn.com/tfs/TB1eiXTXlTH8KJjy0FiXXcRsXXa-24-595.png</p>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>CSS Sprites中任意一张小图的改动，都需要重新生成大图；并且用户端需要重新下载整张大图，这就降低了浏览器缓存的优势</li>\n<li>随着HTTP2的逐渐普及，HTTP2的多路复用机制可以解决请求多个小图片所创建多个HTTP请求的消耗，让CSS Sprites存在的价值降低了</li>\n<li>图片如果放大, 是会失真</li>\n</ul>\n<p>目前其他主流的处理图片的方案:  iconfont 字体图标, svg矢量图...</p>\n<h2 id=\"_10-你对媒体查询的理解是什么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_10-你对媒体查询的理解是什么样的\" aria-hidden=\"true\">#</a> 10. 你对媒体查询的理解是什么样的？</h2>\n<p><strong>考察点: 响应式适配</strong>, 根据不同的屏幕尺寸, 显示不同的效果 (设置盒子的样式)</p>\n<p>媒体查询是自 CSS3 开始加入的一个功能。它可以进行响应式适配展示。</p>\n<p>媒体查询由两部分组成：</p>\n<ul>\n<li>一个可选的媒体类型（如 screen、print 等）</li>\n<li>零个或多个媒体功能限定表达式（如 max-width: 500px、orientation: landscape 等）</li>\n</ul>\n<p>这两部分最终都会被解析为 true 或 false 值，然后整个媒体查询值为 true，则和该媒体查询关联的样式就生效，否则就不生效。</p>\n<p><strong>使用示例：</strong></p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token comment\">/* 在css样式表的定义中直接使用媒体查询 */</span> \n<span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 767px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 991px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 750px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1199px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 980px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1170px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br></div></div><p><a href=\"https://www.cnblogs.com/xiaohuochai/p/5848612.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：深入理解CSS媒体查询<ExternalLinkIcon/></a></p>\n<h2 id=\"_11-你对盒子模型的理解是什么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-你对盒子模型的理解是什么样的\" aria-hidden=\"true\">#</a> 11. 你对盒子模型的理解是什么样的？</h2>\n<p>浏览器的渲染引擎在对网页文档进行布局时，会按照 “CSS 基础盒模型” （CSS Basic Box Model）标准，将文档中的所有元素都表示为一个个矩形的盒子，再用 CSS 去决定这些盒子的大小尺寸、显示位置、以及其他属性（如颜色、背景、边框等）。</p>\n<p>下图就是盒模型示意图，它由几部分组成：</p>\n<ul>\n<li>内容（content）</li>\n<li>内边距（padding）</li>\n<li>边框（border）</li>\n<li>外边距（margin）</li>\n</ul>\n<img src=\"/images/image-20210214144941345.png\" alt=\"image-20210214144941345\" style=\"zoom:25%;\" />\n<h2 id=\"_12-标准盒模型和怪异盒模型有哪些区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_12-标准盒模型和怪异盒模型有哪些区别\" aria-hidden=\"true\">#</a> 12. 标准盒模型和怪异盒模型有哪些区别？</h2>\n<p>两者的区别主要体现在元素尺寸的表示上。</p>\n<p><strong>盒模型的指定：</strong></p>\n<p>在CSS3中，我们可以通过设置 box-sizing 的值来决定具体使用何种盒模型：</p>\n<ul>\n<li>content-box    标准盒模型</li>\n<li>border-box     怪异盒模型</li>\n</ul>\n<p><strong>标准盒模型：</strong></p>\n<p>box-sizing: content-box; (默认值)</p>\n<p>在标准盒模型下，元素的宽（width）和高（height）值即为盒模型中内容（content）的实际宽高值。</p>\n<img src=\"/images/image-20210214150511841.png\" alt=\"image-20210214150511841\" style=\"zoom:25%;\" />\n<p>因此，计算一个元素宽度的公式如下(不考虑margin, margin是外边距,  如果是计算占用页面的空间, 就要带上margin)：</p>\n<blockquote>\n<p>盒子宽度 =  <code>border-left</code> + <code>padding-left</code> + <code>width</code> + <code>padding-right</code> + <code>border-right</code></p>\n<p>占据页面宽度 = <code>margin-left</code> + <code>border-left</code> + <code>padding-left</code> + <code>width</code> + <code>padding-right</code> + <code>border-right</code> + <code>margin-right</code></p>\n</blockquote>\n<p><strong>怪异盒模型：</strong></p>\n<p>box-sizing: border-box; (目前主流常用值)</p>\n<p>在怪异盒模型下，元素的 width 和 height 值却不是 content 的实际宽高，而是去除 margin 后剩下的元素占用区域的宽高，即：</p>\n<img src=\"/images/image-20210214151037552.png\" alt=\"image-20210214151037552\" style=\"zoom:25%;\" />\n<p>因此，计算一个元素占用了页面总宽度的公式如下：</p>\n<blockquote>\n<p>盒子宽度 =  <code>width</code></p>\n<p>盒子占据页面宽度 = <code>margin-left</code> + <code>width</code> + <code>margin-right</code></p>\n</blockquote>\n<p><a href=\"https://www.cnblogs.com/xiaohuochai/p/5202597.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：深入理解盒模型<ExternalLinkIcon/></a></p>\n<h2 id=\"_13-说说伪类和伪元素的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_13-说说伪类和伪元素的区别\" aria-hidden=\"true\">#</a> 13. 说说伪类和伪元素的区别？</h2>\n<p><strong>什么是伪类？</strong></p>\n<p>伪类（pseudo-class）是以冒号<code>:</code>为前缀，可被添加到⼀个选择器的末尾的关键字。</p>\n<p>它用于让样式在元素的特定状态下才被应用到实际的元素上。比如：<code>:checked</code>、<code>:hover</code>、<code>:disabled</code>、 <code>:first-child</code>等。</p>\n<p>:hover</p>\n<p>:nth-child(1)</p>\n<p>:nth-child(2)</p>\n<p>:checked</p>\n<p>注意: 伪类, 虽然是写法比较特殊, css选择器的权重, 和类一致的</p>\n<p><strong>什么是伪元素？</strong></p>\n<p>:before / :after</p>\n<p>伪元素⽤于创建⼀些并不在 DOM 树中的元素，并为其添加样式。伪元素的语法和伪类类似，可以一个冒号或两个冒号为前缀。</p>\n<p>⽐如，可以通过 <code>:before</code> 、<code>:after</code> 来在⼀个元素前、后增加⼀些额外的⽂本并为它们添加样式；</p>\n<p>并且，虽然⽤户可以看到这些⽂本，但其实它们并不在 DOM 树中。(<strong>坑: 伪元素是无法注册事件的, 所以不要通过js控制伪元素</strong>)</p>\n<p><strong>两者的区别</strong></p>\n<p>虽然它们在语法上是一致的，但是它们的功能区别还是非常明显的。</p>\n<ul>\n<li>伪类是用来匹配元素的特殊状态的</li>\n<li>伪元素是用来匹配元素的隶属元素的，这些隶属元素可以在界面中展示，但在 DOM 中不体现</li>\n</ul>\n<p><a href=\"http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：伪类与伪元素<ExternalLinkIcon/></a></p>\n<h2 id=\"_14-谈谈你对-flex-的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_14-谈谈你对-flex-的理解\" aria-hidden=\"true\">#</a> 14. 谈谈你对 flex 的理解？</h2>\n<p>在真实的应用场景中，通常会遇到各种各样不同尺⼨和分辨率的设备，为了能在所有这些设备上正常的布局我们的应用界面，就需要响应式的界⾯设计方式来满⾜这种复杂的布局需求。</p>\n<p>flex 弹性盒模型的优势在于开发⼈员只需要声明布局应该具有的⾏为，⽽不需要给出具体的实现⽅式，浏览器负责完成实际布局，当布局涉及到不定宽度，分布对⻬的场景时，就要优先考虑弹性盒布局。</p>\n<p>你能联想到的flex语法有哪些呢?</p>\n<p>flex-direction: 调整主轴方向</p>\n<div class=\"language-txt ext-txt line-numbers-mode\"><pre v-pre class=\"language-txt\"><code>row：主轴方向为水平向右\ncolumn：主轴方向为竖直向下\nrow-reverse:主轴方向为水平向左\ncolumn-reverse:主轴方向是竖直向上。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><p>justify-content主要用来设置<strong>主轴方向的对齐方式</strong></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>flex-start: 弹性盒子元素将向起始位置对齐\nflex-end: 弹性盒子元素将向结束位置对齐。\ncenter: 弹性盒子元素将向行中间位置对齐\nspace-around: 弹性盒子元素会平均地分布在行里\nspace-between:第一个贴左边，最后一个贴右边，其他盒子均分，保证每个盒子之间的空隙是相等的。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p>align-items用于调整<strong>侧轴的对齐方式</strong></p>\n<div class=\"language-txt ext-txt line-numbers-mode\"><pre v-pre class=\"language-txt\"><code>flex-start： 元素在侧轴的起始位置对齐。 \nflex-end： 元素在侧轴的结束位置对齐。\ncenter： 元素在侧轴上居中对齐。\nstretch： 元素的高度会被拉伸到最大（不给高度时, 才拉伸）。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><p>flex-wrap属性控制flex容器是单行或者多行,默认不换行</p>\n<div class=\"language-txt ext-txt line-numbers-mode\"><pre v-pre class=\"language-txt\"><code>nowrap： 不换行（默认），如果宽度溢出，会压缩子盒子的宽度。\nwrap： 当宽度不够的时候，会换行。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><p>align-content用来设置多行的flex容器的排列方式</p>\n<div class=\"language-txt ext-txt line-numbers-mode\"><pre v-pre class=\"language-txt\"><code>flex-start： 各行向侧轴的起始位置堆叠。 \nflex-end： 各行向弹性盒容器的结束位置堆叠。\ncenter： 各行向弹性盒容器的中间位置堆叠。\nspace-around： 各行在侧轴中平均分布。 \nspace-between： 第一行贴上边，最后一个行贴下边,其他行在弹性盒容器中平均分布。 \nstretch：拉伸，不设置高度的情况下。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><blockquote>\n<p>可参考 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener noreferrer\">flex布局教程<ExternalLinkIcon/></a></p>\n</blockquote>\n<hr>\n<h1 id=\"javascript基础\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#javascript基础\" aria-hidden=\"true\">#</a> JavaScript基础</h1>\n<h2 id=\"_1-解释下什么是变量声明提升\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-解释下什么是变量声明提升\" aria-hidden=\"true\">#</a> 1. 解释下什么是变量声明提升？</h2>\n<p>变量提升（hoisting），是负责解析执行代码的 JavaScript 引擎的工作方式产生的一个特性。</p>\n<p>JS引擎在运行一份代码的时候，会按照下面的步骤进行工作：</p>\n<ol>\n<li>\n<p>首先，对代码进行预解析，并获取声明的所有变量</p>\n</li>\n<li>\n<p>然后，将这些变量的声明语句统一放到代码的最前面</p>\n</li>\n<li>\n<p>最后，开始一行一行运行代码</p>\n</li>\n</ol>\n<p>我们通过一段代码来解释这个运行过程：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>上⾯这段代码的实际执⾏顺序为:</p>\n<ol>\n<li>JS引擎将 <code>var a = 1</code> 分解为两个部分：变量声明语句 <code>var a = undefined</code> 和变量赋值语句 <code>a = 1</code></li>\n<li>JS引擎将 <code>var a = undefined</code> 放到代码的最前面，而 <code>a = 1</code> 保留在原地</li>\n</ol>\n<p>也就是说经过了转换，代码就变成了:</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined </span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>变量的这一转换过程，就被称为变量的声明提升。</p>\n<p>而这是不规范, 不合理的, 我们用的  let 就没有这个变量提升的问题</p>\n<h2 id=\"_2-js-的参数是以什么方式进行传递的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-js-的参数是以什么方式进行传递的\" aria-hidden=\"true\">#</a> 2. JS 的参数是以什么方式进行传递的？</h2>\n<p>基本数据类型和复杂数据类型的数据在传递时，会有不同的表现。</p>\n<p><strong>基本类型：是值传递</strong>！</p>\n<p>基本类型的传递方式比较简单，是按照 <code>值传递</code> 进行的。</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  <span class=\"token comment\">// 并不会改变实参的值</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p><strong>复杂类型: 传递的是地址! (变量中存的就是地址)</strong></p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210305165413588\" originSrc=\"images/image-20210305165413588.png\" data=\"aurora\"></p>\n<p>来看下面的代码：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  x<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { count: 10 }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { count: 10 }</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>从运行结果来看，函数内改变了参数对象内的 <code>count</code> 后，外部的实参对象 <code>a</code> 的内容也跟着改变了，所以传递的是地址。</p>\n<p>思考题:</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { count: 20 }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { count: 1 }</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210305165848781\" originSrc=\"images/image-20210305165848781.png\" data=\"aurora\"></p>\n<p>我们会发现外部的实参对象 <code>a</code> 并没有因为在函数内对形参的重新赋值而被改变！</p>\n<p>因为当我们直接为这个形参变量重新赋值时，其实只是让形参变量指向了别的堆内存地址，而外部实参变量的指向还是不变的。</p>\n<p>下图展示的是复杂类型参数传递后的状态：</p>\n<img src=\"/images/image-20210218233241397.png\" alt=\"image-20210218233241397\" style=\"zoom:50%;\" />\n<p>下图展示的是重新为形参赋值后的状态：</p>\n<img src=\"/images/image-20210218233343016.png\" alt=\"image-20210218233343016\" style=\"zoom:50%;\" />\n<h2 id=\"_3-javascript垃圾回收是怎么做的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-javascript垃圾回收是怎么做的\" aria-hidden=\"true\">#</a> 3. JavaScript垃圾回收是怎么做的？</h2>\n<p>JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收。</p>\n<p>正因为垃圾回收器的存在，许多人认为JS不用太关心内存管理的问题，</p>\n<p>但如果不了解JS的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况。</p>\n<h3 id=\"_3-1-内存的生命周期\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-1-内存的生命周期\" aria-hidden=\"true\">#</a> 3.1 内存的生命周期</h3>\n<p>JS环境中分配的内存, 一般有如下生命周期：</p>\n<ol>\n<li>\n<p>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</p>\n</li>\n<li>\n<p>内存使用：即读写内存，也就是使用变量、函数等</p>\n</li>\n<li>\n<p>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</p>\n<p>全局变量一般不会回收, 一般局部变量的的值, 不用了, 会被自动回收掉</p>\n</li>\n</ol>\n<p>内存分配:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// 为变量分配内存</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"ifcode\"</span>\n\n<span class=\"token comment\">// 为对象分配内存</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'ifcode'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 为函数分配内存</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><h3 id=\"_3-2-垃圾回收算法说明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-2-垃圾回收算法说明\" aria-hidden=\"true\">#</a> 3.2 垃圾回收算法说明</h3>\n<p>所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉</p>\n<p>下面介绍两种常见的浏览器垃圾回收算法: 引用计数 和 标记清除法</p>\n<h3 id=\"_3-3-引用计数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-3-引用计数\" aria-hidden=\"true\">#</a> 3.3 引用计数</h3>\n<p>IE采用的引用计数算法, 定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。</p>\n<p>如果没有任何变量指向它了，说明该对象已经不再需要了。</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// 创建一个对象person, person指向一块内存空间, 该内存空间的引用数 +1</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'ifcode'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> person   <span class=\"token comment\">// 两个变量指向一块内存空间, 该内存空间的引用数为 2</span>\nperson <span class=\"token operator\">=</span> <span class=\"token number\">1</span>       <span class=\"token comment\">// 原来的person对象被赋值为1，对象内存空间的引用数-1,</span>\n                 <span class=\"token comment\">// 但因为p指向原person对象，还剩一个对于对象空间的引用, 所以对象它不会被回收</span>\n\np <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>         <span class=\"token comment\">// 原person对象已经没有引用，会被回收</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>由上面可以看出，引用计数算法是个简单有效的算法。</p>\n<p><strong>但它却存在一个致命的问题：循环引用。</strong></p>\n<p>如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    o1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> o2\n    o2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> o1 \n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Cycle reference!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210305172448582\" originSrc=\"images/image-20210305172448582.png\" data=\"aurora\"></p>\n<h3 id=\"_3-4-标记清除算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-4-标记清除算法\" aria-hidden=\"true\">#</a> 3.4 标记清除算法</h3>\n<p>现代的浏览器已经不再使用引用计数算法了。</p>\n<p>现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。</p>\n<p>标记清除法:</p>\n<ul>\n<li>\n<p>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。</p>\n</li>\n<li>\n<p>简单来说，就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。</p>\n</li>\n<li>\n<p>凡是能从根部到达的对象，都是还需要使用的。那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收。</p>\n</li>\n</ul>\n<p>从这个概念可以看出，无法触及的对象包含了没有引用的对象这个概念（没有任何引用的对象也是无法触及的对象）。</p>\n<p>根据这个概念，上面的例子可以正确被垃圾回收处理了。</p>\n<p>参考文章：<a href=\"https://www.jianshu.com/p/84a8fd5fa0ee\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript内存管理<ExternalLinkIcon/></a></p>\n<h2 id=\"_4-谈谈你对-javascript-作用域链的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-谈谈你对-javascript-作用域链的理解\" aria-hidden=\"true\">#</a> 4. 谈谈你对 JavaScript 作用域链的理解？</h2>\n<p>JavaScript 在执⾏过程中会创建一个个的<strong>可执⾏上下⽂</strong>。 (每个函数执行都会创建这么一个可执行上下文)</p>\n<p>每个可执⾏上下⽂的词法环境中包含了对外部词法环境的引⽤，可通过该引⽤来获取外部词法环境中的变量和声明等。</p>\n<p>这些引⽤串联起来，⼀直指向全局的词法环境，形成一个链式结构，被称为作⽤域链。</p>\n<p>简而言之: 函数内部 可以访问到 函数外部作用域的变量,  而外部函数还可以访问到全局作用域的变量,</p>\n<p>这样的变量作用域访问的链式结构, 被称之为作用域链</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>下图为由多个可执行上下文组成的调用栈：</p>\n<ul>\n<li>栈最底部为<code>全局可执行上下文</code></li>\n<li><code>全局可执行上下文</code> 之上有多个 <code>函数可执行上下文</code></li>\n<li>每个可执行上下文中包含了指向外部其他可执行上下文的引用，直到 <code>全局可执行上下文</code> 时它指向 <code>null</code></li>\n</ul>\n<img src=\"/images/image-20210218143938843.png\" alt=\"image-20210218143938843\" style=\"zoom:30%;\" />\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306093300970\" originSrc=\"images/image-20210306093300970.png\" data=\"aurora\"></p>\n<p>js全局有全局可执行上下文, 每个函数调用时, 有着函数的可执行上下文, 会入js调用栈</p>\n<p>每个可执行上下文, 都有者对于外部上下文词法作用域的引用, 外部上下文也有着对于再外部的上下文词法作用域的引用</p>\n<p><strong>=&gt; 就形成了作用域链</strong></p>\n<h2 id=\"_5-谈谈你对闭包的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-谈谈你对闭包的理解\" aria-hidden=\"true\">#</a> 5. 谈谈你对闭包的理解？</h2>\n<p>这个问题想考察的主要有两个方面：</p>\n<ul>\n<li>对闭包的基本概念的理解</li>\n<li>对闭包的作用的了解</li>\n</ul>\n<p><strong>什么是闭包？</strong></p>\n<p>MDN的官方解释：</p>\n<blockquote>\n<p>闭包是函数和声明该函数的词法环境的组合</p>\n</blockquote>\n<p>更通俗一点的解释是：</p>\n<blockquote>\n<p>内层函数, 引用外层函数上的变量, 就可以形成闭包</p>\n</blockquote>\n<p>需求: 定义一个计数器方法, 每次执行一次函数, 就调用一次进行计数</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">++</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn函数被调用了'</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">'次'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p>这样不好! count 定义成了全局变量, 太容易被别人修改了,  我们可以利用闭包解决</p>\n<p>闭包实例:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn函数被调用了'</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">'次'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> add\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> addFn <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">addFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">addFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">addFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><p><strong>闭包的主要作用是什么？</strong></p>\n<p>在实际开发中，闭包最大的作用就是用来 <strong>变量私有</strong>。</p>\n<p>下面再来看一个简单示例：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 以 let 声明一个局部变量，而不是 this.name</span>\n  <span class=\"token comment\">// this.name = 'zs'     =>  p.name</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hm_programmer'</span> <span class=\"token comment\">// 数据私有</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> name\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    name <span class=\"token operator\">=</span> value\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// new:</span>\n<span class=\"token comment\">// 1. 创建一个新的对象</span>\n<span class=\"token comment\">// 2. 让构造函数的this指向这个新对象</span>\n<span class=\"token comment\">// 3. 执行构造函数</span>\n<span class=\"token comment\">// 4. 返回实例</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hm_programmer</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Tom</span>\n\np<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// 访问不到 name 变量：undefined</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div></div><p>在此示例中，变量 <code>name</code> 只能通过 Person 的实例方法进行访问，外部不能直接通过实例进行访问，形成了一个私有变量。</p>\n<h2 id=\"_6-javascript中数据类型的隐式转换规则-了解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-javascript中数据类型的隐式转换规则-了解\" aria-hidden=\"true\">#</a> 6. JavaScript中数据类型的隐式转换规则(了解)</h2>\n<p>在if语句、逻辑语句、数学运算逻辑、== 等情况下都可能出现隐式类型转换。</p>\n<p>下表展示了一系列原始值，通过隐式转换成数字、字符串、布尔类型后所得到的值：</p>\n<img src=\"/images/image-20210218171603780.png\" alt=\"image-20210218171603780\" style=\"zoom:45%;\" />\n<p>坑: 判断时,  尽量不要用 <code>= =</code> , 要用 <code>= = =</code> ( 两个等号判断,  如果类型不同,  默认会进行隐式类型转换再比较)</p>\n<h2 id=\"_7-谈谈你对原型链的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_7-谈谈你对原型链的理解\" aria-hidden=\"true\">#</a> 7. 谈谈你对原型链的理解？</h2>\n<p>要讲清楚这个问题，主要着重这几个方面：</p>\n<ul>\n<li>什么是原型对象</li>\n<li>构造函数, 原型对象, 实例的三角关系图</li>\n<li>原型链如何形成</li>\n</ul>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306104516852\" originSrc=\"images/image-20210306104516852.png\" data=\"aurora\"></p>\n<p><strong>原型对象</strong></p>\n<p>在 JavaScript 中，除去一部分内建函数，绝大多数的函数都会包含有一个叫做 <code>prototype</code> 的属性，指向原型对象，</p>\n<p>基于构造函数创建出来的实例, 都可以共享访问原型对象的属性。</p>\n<p>例如我们的 <code>hasOwnProperty</code>, <code>toString</code> ⽅法等其实是 Obejct 原型对象的方法，它可以被任何对象当做⾃⼰的⽅法来使⽤。</p>\n<p><code>hasOwnProperty</code> 用于判断, 某个属性, 是不是自己的  (还是原型链上的)</p>\n<p>来看一段代码：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> \n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> \n  <span class=\"token literal-property property\">job</span><span class=\"token operator\">:</span> <span class=\"token string\">\"student\"</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasOwnProperty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasOwnProperty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>可以看到，<code>hasOwnProperty</code> 并不是 <code>person</code> 对象的属性，但是 <code>person</code> 却能调用它。</p>\n<p>那么 <code>person</code> 对象是如何找到 Object 原型中的 <code>hasOwnProperty</code> 的呢？这就要靠原型链的能力了。</p>\n<p>需求: 简单绘制原型三角关系图!</p>\n<p><strong>原型链</strong></p>\n<p>在 JavaScript 中，每个对象中都有一个 <code>__proto__</code> 属性，这个属性指向了当前对象的构造函数的原型。</p>\n<p>对象可以通过自身的 <code>__proto__</code>属性与它的构造函数的原型对象连接起来，</p>\n<p>而因为它的原型对象也有 <code>__proto__</code>，因此这样就串联形成一个链式结构，也就是我们称为的原型链。</p>\n<img src=\"/images/image-20210218212449526.png\" alt=\"image-20210218212449526\" style=\"zoom:50%;\" />\n<h2 id=\"_6-谈谈对于继承的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-谈谈对于继承的理解\" aria-hidden=\"true\">#</a> 6. 谈谈对于继承的理解</h2>\n<p><strong>为什么要学习继承 ?</strong></p>\n<p>写的构造函数, 定义了一个类型 (人类), 万一项目非常大, 又有了细化的多个类型 (老师, 工人, 学生)</p>\n<p>学习继承, 可以让多个构造函数之间建立关联, 便于管理和复用</p>\n<p><strong>什么是继承 ?</strong></p>\n<p>继承: 从别人那里, 继承东西过来 (财产, 房产)</p>\n<p>代码层面的继承: 继承一些属性和方法</p>\n<h3 id=\"_6-1-继承-原型继承\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-1-继承-原型继承\" aria-hidden=\"true\">#</a> 6.1 继承 - 原型继承</h3>\n<p>原型继承: 通过改造原型链, 利用原型链的语法, 实现继承方法!</p>\n<p>分析需求:</p>\n<p>​\t人类, 属性: name, age</p>\n<p>​\t学生, 属性: name, age, className</p>\n<p>​\t工人, 属性: name, age, companyName</p>\n<p>无论学生, 还是工人, =&gt; 都是人类, 所以人类原型上有的方法, 他们都应该要有</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 1. 定义Person构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人类会说话'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. 定义Student构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Student</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> className</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 3. 原型继承: 利用原型链, 继承于父级构造函数, 继承原型上的方法</span>\n<span class=\"token comment\">// 语法: 子构造函数.prototype = new 父构造函数()</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">study</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'学生在学习'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'80期'</span><span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div></div><p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306111112493\" originSrc=\"images/image-20210306111112493.png\" data=\"aurora\"></p>\n<h3 id=\"_6-2-继承-组合继承\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-2-继承-组合继承\" aria-hidden=\"true\">#</a> 6.2 继承 - 组合继承</h3>\n<p>组合继承有时候也叫伪经典继承，指的是将原型链 和 借用构造函数 call 技术组合到一块，</p>\n<p>从而发挥二者之长的一种继承模式，其背后的思路: <strong>是使用原型链实现对原型属性和方法的继承 (主要是方法)，</strong></p>\n<p><strong>而通过借用构造函数来实现对实例属性构造的继承</strong>。这样既通过在原型上定义方法实现了函数复用，又能保证每个实例都有它的自己的属性。</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 1. 定义Person构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人类会说话'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. 定义Student构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Student</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> className</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 实现构造属性的继承</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3. 原型继承: 利用原型链, 继承于父级构造函数, 继承原型上的方法</span>\n<span class=\"token comment\">// 语法: 子构造函数.prototype = new 父构造函数()</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">study</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'学生在学习'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'80期'</span><span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 方法通过 原型继承</span>\n<span class=\"token comment\">// 属性通过 父构造函数的.call(this, name, age)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div></div><h3 id=\"_6-3-继承-寄生组合继承\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-3-继承-寄生组合继承\" aria-hidden=\"true\">#</a> 6.3 继承 - 寄生组合继承</h3>\n<p>student实例上有 name age,  而原型 <code>__proto__</code>上不需要再有这些属性, 所以利用 Object.create 改装下</p>\n<p>Object.create(参数对象),</p>\n<ol>\n<li>Object.create 会创建一个新对象,</li>\n<li>并且这个新对象的<code>__proto__</code> 会指向传入的参数对象</li>\n</ol>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 1. 定义Person构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人类会说话'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. 定义Student构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Student</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> className</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3. 原型继承: 利用原型链, 继承于父级构造函数, 继承原型上的方法</span>\n<span class=\"token comment\">// 语法: 子构造函数.prototype = new 父构造函数()</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">study</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'学生在学习'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'80期'</span><span class=\"token punctuation\">)</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 总结:</span>\n<span class=\"token comment\">// Object.create() 以参数的对象, 作为新建对象的__proto__属性的值, 返回新建的对象</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div></div><p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306114638139\" originSrc=\"images/image-20210306114638139.png\" data=\"aurora\"></p>\n<h3 id=\"_6-4-es6-class-实现继承-extends\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-4-es6-class-实现继承-extends\" aria-hidden=\"true\">#</a> 6.4 es6 - class 实现继承 extends</h3>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// 继承关键字 => extends</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">jump</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'会跳'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> lesson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// extends 中, 必须调用 super(), 会触发执行父类的构造函数</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lesson <span class=\"token operator\">=</span> lesson\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'构造函数执行了'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sayHello</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'会打招呼'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> teacher1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'体育'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>teacher1<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div></div><h2 id=\"_8-如何判断是否是数组\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_8-如何判断是否是数组\" aria-hidden=\"true\">#</a> 8. 如何判断是否是数组？</h2>\n<p>方法一：使用 <code>toString</code> 方法</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p>方法二：使用 ES6 新增的 <code>Array.isArray</code> 方法</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><h2 id=\"_9-谈谈你对this的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-谈谈你对this的理解\" aria-hidden=\"true\">#</a> 9. 谈谈你对this的理解？</h2>\n<p><code>this</code> 是一个在运行时才进行绑定的引用，在不同的情况下它可能会被绑定不同的对象。</p>\n<p><strong>默认绑定</strong> (指向window的情况)  (函数调用模式 fn() )</p>\n<p>默认情况下，<code>this</code> 会被绑定到全局对象上，比如在浏览器环境中就为<code>window</code>对象，在node.js环境下为<code>global</code>对象。</p>\n<p>如下代码展示了这种绑定关系：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code>message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Hello\"</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><p><strong>隐式绑定</strong> (谁调用, this指向谁) (方法调用模式 obj.fn() )</p>\n<p>如果函数的调用是从对象上发起时，则该函数中的 <code>this</code> 会被自动隐式绑定为对象：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> test\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello,world\"</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p><strong>显式绑定</strong> (又叫做硬绑定)  (上下文调用模式, 想让this指向谁, this就指向谁)</p>\n<p>硬绑定 =&gt; call  apply  bind</p>\n<p>可以显式的进行绑定：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"你好世界123\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"你好世界456\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"你好世界123\"</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"你好世界456\"</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><p><strong>new 绑定</strong> (构造函数模式)</p>\n<p>另外，在使用 <code>new</code> 创建对象时也会进行 <code>this</code> 绑定</p>\n<p>当使用 <code>new</code> 调用构造函数时，会创建一个新的对象并将该对象绑定到构造函数的 <code>this</code> 上：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>message <span class=\"token comment\">// \"hello,world\"</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p>小测试:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n<span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// -------------------------------------------------------------</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theName<span class=\"token punctuation\">,</span> theAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> theName\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> theAge\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 定义函数</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> per <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小黑\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nper<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div></div><h2 id=\"_10-箭头函数中的this指向什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_10-箭头函数中的this指向什么\" aria-hidden=\"true\">#</a> 10. 箭头函数中的this指向什么？</h2>\n<p>箭头函数不同于传统函数，它其实没有属于⾃⼰的 <code>this</code>，</p>\n<p>它所谓的 <code>this</code> 是, 捕获其外层  上下⽂的 <code>this</code> 值作为⾃⼰的 <code>this</code> 值。</p>\n<p>并且由于箭头函数没有属于⾃⼰的 <code>this</code> ，它是不能被 <code>new</code> 调⽤的。</p>\n<p>我们可以通过 Babel 转换前后的代码来更清晰的理解箭头函数:</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 转换前的 ES6 代码</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div><div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 转换后的 ES5 代码</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token function-variable function\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>that <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>这里我们看到，箭头函数中的 <code>this</code> 就是它上层上下文函数中的 <code>this</code>。</p>\n<h2 id=\"_11-promise-的静态方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-promise-的静态方法\" aria-hidden=\"true\">#</a> 11. Promise 的静态方法</h2>\n<p>promise的三个状态: pending(默认)   fulfilled(成功)   rejected(失败)</p>\n<ol>\n<li>resolve函数被执行时, 会将promise的状态从 pending 改成 fulfilled 成功</li>\n<li>reject函数被执行时, 会将promise的状态从pending 改成 rejected 失败</li>\n</ol>\n<p>Promise.reject()</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p>Promise.resolve()</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p><strong>Promise.all([promise1, promise2, promise3])</strong>  等待原则, 是在所有promise都完成后执行, 可以用于处理一些<code>并发的任务</code></p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// 后面的.then中配置的函数, 是在前面的所有promise都完成后执行, 可以用于处理一些并发的任务</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">,</span> promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// values 是一个数组, 会收集前面promise的结果 values[0] => promise1的成功的结果</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><p>Promise.race([promise1, promise2, promise3]) 赛跑, 竞速原则, 只要三个promise中有一个满足条件, 就会执行.then(用的较少)</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306144638905\" originSrc=\"images/image-20210306144638905.png\" data=\"aurora\"></p>\n<h2 id=\"_12-宏任务-微任务-是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_12-宏任务-微任务-是什么\" aria-hidden=\"true\">#</a> 12. 宏任务 微任务 是什么</h2>\n<p>小例题:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><p>宏任务: 主线程代码, setTimeout 等属于宏任务,  上一个宏任务执行完, 才会考虑执行下一个宏任务</p>\n<p>微任务: promise .then .catch的需要执行的内容, 属于微任务, 满足条件的微任务, 会被添加到当前宏任务的最后去执行</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20201208040306978\" originSrc=\"images/image-20201208040306978.png\" data=\"aurora\"></p>\n<p><strong>事件循环队列 eventLoop</strong></p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20201208040235602\" originSrc=\"images/image-20201208040235602.png\" data=\"aurora\"></p>\n<p>例题1:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 宏任务</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 微任务</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306151137688\" originSrc=\"images/image-20210306151137688.png\" data=\"aurora\"></p>\n<p>例题2:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p>例题3:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token number\">2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p>例题4:</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'嘿嘿'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 微任务</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gaga'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306152010989\" originSrc=\"images/image-20210306152010989.png\" data=\"aurora\"></p>\n<p>考察点: async 函数只有从 await 往下才是异步的开始</p>\n<h2 id=\"_13-async-await是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_13-async-await是什么\" aria-hidden=\"true\">#</a> 13. async/await是什么？</h2>\n<p>ES7 标准中新增的 <code>async</code> 函数，从目前的内部实现来说其实就是 <code>Generator</code> 函数的语法糖。</p>\n<p>它基于 Promise，并与所有现存的基于Promise 的 API 兼容。</p>\n<p><strong>async 关键字</strong></p>\n<ol>\n<li>\n<p><code>async</code> 关键字用于声明⼀个异步函数（如 <code>async function asyncTask1() {...}</code>）</p>\n</li>\n<li>\n<p><code>async</code> 会⾃动将常规函数转换成 Promise，返回值也是⼀个 Promise 对象</p>\n</li>\n<li>\n<p><code>async</code> 函数内部可以使⽤ <code>await</code></p>\n</li>\n</ol>\n<p><strong>await 关键字</strong></p>\n<ol>\n<li>\n<p><code>await</code> 用于等待异步的功能执⾏完毕 <code>var result = await someAsyncCall()</code></p>\n</li>\n<li>\n<p><code>await</code> 放置在 Promise 调⽤之前，会强制async函数中其他代码等待，直到 Promise 完成并返回结果</p>\n</li>\n<li>\n<p><code>await</code> 只能与 Promise ⼀起使⽤</p>\n</li>\n<li>\n<p><code>await</code> 只能在 <code>async</code> 函数内部使⽤</p>\n</li>\n</ol>\n<h2 id=\"_14-相较于-promise-async-await有何优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_14-相较于-promise-async-await有何优势\" aria-hidden=\"true\">#</a> 14. 相较于 Promise，async/await有何优势？</h2>\n<ol>\n<li>同步化代码的阅读体验（Promise 虽然摆脱了回调地狱，但 then 链式调⽤的阅读负担还是存在的）</li>\n<li>和同步代码更一致的错误处理方式（ async/await 可以⽤成熟的 try/catch 做处理，比 Promise 的错误捕获更简洁直观）</li>\n<li>调试时的阅读性, 也相对更友好</li>\n</ol>\n<h2 id=\"_15-深拷贝-浅拷贝\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_15-深拷贝-浅拷贝\" aria-hidden=\"true\">#</a> 15. 深拷贝 浅拷贝</h2>\n<p>引用类型, 进行赋值时, 赋值的是地址</p>\n<ol>\n<li>\n<p>浅拷贝</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>obj\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div></li>\n<li>\n<p>深拷贝</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">car</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'宝马'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>当然递归也能解决, 只是比较麻烦~</p>\n<p>...</p>\n</li>\n</ol>\n<p>其他方案, 可以参考一些博客</p>\n<hr>\n<h1 id=\"http协议\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#http协议\" aria-hidden=\"true\">#</a> HTTP协议</h1>\n<h2 id=\"_1-http有哪些方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-http有哪些方法\" aria-hidden=\"true\">#</a> 1. HTTP有哪些⽅法？</h2>\n<p>HTTP 1.0 标准中，定义了3种请求⽅法：GET、POST、HEAD</p>\n<p>HTTP 1.1 标准中，新增了请求⽅法：PUT、PATCH、DELETE、OPTIONS、TRACE、CONNECT</p>\n<h2 id=\"_2-各个http方法的具体作用是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-各个http方法的具体作用是什么\" aria-hidden=\"true\">#</a> 2. 各个HTTP方法的具体作用是什么？</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">GET</td>\n<td>通常⽤于请求服务器发送某些资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POST</td>\n<td>发送数据给服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HEAD</td>\n<td>请求资源的头部信息, 并且这些头部与 HTTP GET ⽅法请求时返回的⼀致。<br />该请求⽅法的⼀个使⽤场景是在下载⼀个⼤⽂件前先获取其⼤⼩再决定是否要下载, 以此可以节约带宽资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PUT</td>\n<td>⽤于全量修改⽬标资源 (看接口, 也可以用于添加)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DELETE</td>\n<td>⽤于删除指定的资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OPTIONS</td>\n<td>⽤于获取⽬的资源所⽀持的通信选项 (跨域请求前, 预检请求, 判断目标是否安全)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TRACE</td>\n<td>该方法会  让服务器  原样返回任意客户端请求的信息内容, 用于诊断和判断</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CONNECT</td>\n<td>HTTP/1.1协议中预留给能够将连接改为管道⽅式的代理服务器<br />(把服务器作为跳板，让服务器代替用户去访问其它网页, 之后把数据原原本本的返回给用户)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PATCH</td>\n<td>⽤于对资源进⾏部分修改</td>\n</tr>\n</tbody>\n</table>\n<p>GET POST PUT PATCH DELETE</p>\n<p>GET/DELETE  参数是在地址栏中传递的</p>\n<p>PUT/PATCH/POST 参数是在请求体传递的</p>\n<h2 id=\"_3-get方法和post方法有何区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-get方法和post方法有何区别\" aria-hidden=\"true\">#</a> 3. GET方法和POST方法有何区别？</h2>\n<p>默认的http请求的内容, 在网络中传输, 明文的形式传递的  (https 对内容加密)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>GET方法</th>\n<th>POST方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>数据传输⽅式</strong></td>\n<td>通过URL传输数据 (地址栏拼接参数)</td>\n<td>通过请求体传输</td>\n</tr>\n<tr>\n<td><strong>数据安全</strong></td>\n<td>数据暴露在URL中，可通过浏览历史记录、缓存等很容易查到数据信息</td>\n<td>数据因为在请求主体内，<br />所以有⼀定的安全性保证</td>\n</tr>\n<tr>\n<td><strong>数据类型</strong></td>\n<td>只允许 ASCII 字符</td>\n<td>⽆限制</td>\n</tr>\n<tr>\n<td><strong>GET⽆害</strong></td>\n<td>刷新、后退等浏览器操作是⽆害的</td>\n<td>可能会引起重复提交表单</td>\n</tr>\n<tr>\n<td><strong>功能特性</strong></td>\n<td>安全且幂等（这⾥的安全是指只读特性，就是使⽤这个⽅法不会引起服务器状态变化。<br /><strong>幂等的概念是指同⼀个请求⽅法执⾏多次和仅执⾏⼀次的效果完全相同）</strong></td>\n<td>⾮安全(会引起服务器端的变化)、<strong>⾮幂等</strong></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_4-http请求报文是什么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-http请求报文是什么样的\" aria-hidden=\"true\">#</a> 4. HTTP请求报文是什么样的？</h2>\n<p>HTTP 请求报⽂的组成：请求⾏、请求头、(空⾏)、请求体。</p>\n<p>实际请求报文实例:</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210305232854139\" originSrc=\"images/image-20210305232854139.png\" data=\"aurora\"></p>\n<p><strong>请求行</strong></p>\n<p>包含了请求⽅法、URL、HTTP 协议版本，它们之间⽤空格进行分隔。例如：</p>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code>GET http://www.abc.com/articles HTTP/1.1\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p><strong>请求头</strong></p>\n<p>请求头由键值对组成，每⾏⼀对，键值之间⽤英⽂冒号<code>:</code>进行分隔。例如：</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>Content-Type: application/json\nHost: www.abc.com\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><p><strong>请求体</strong></p>\n<p>请求体中放置 POST、PUT、PATCH 等请求方法所需要携带的数据。</p>\n<h2 id=\"_5-http响应报文是什么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-http响应报文是什么样的\" aria-hidden=\"true\">#</a> 5. HTTP响应报文是什么样的？</h2>\n<p>HTTP 响应报⽂的组成: 响应⾏、响应头、空⾏、响应体。</p>\n<img src=\"/images/image-20210219125038371.png\" alt=\"image-20210219125038371\" style=\"zoom:40%;\" />\n<p><strong>响应行</strong></p>\n<p>响应行由协议版本、状态码、状态码的原因短语3个内容组成，中间以空格分隔。例如：</p>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code>HTTP/1.1 <span class=\"token number\">200</span> OK\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p><strong>响应头</strong></p>\n<p>响应头由键值对组成，每⾏⼀对，键值之间⽤英⽂冒号<code>:</code>进行分隔。例如：</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>Content-Length: 1024\nContent-Type: application/json\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><p><strong>响应体</strong></p>\n<p>服务器发送过来的数据。</p>\n<p>小结:</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306161216371\" originSrc=\"images/image-20210306161216371.png\" data=\"aurora\"></p>\n<h2 id=\"_6-你了解的http状态码有哪些\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-你了解的http状态码有哪些\" aria-hidden=\"true\">#</a> 6. 你了解的HTTP状态码有哪些？</h2>\n<p><strong>成功（2XX）</strong></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>原因短语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>OK</td>\n<td>表示从客户端发来的请求在服务器端被正确处理</td>\n</tr>\n<tr>\n<td>201</td>\n<td>Created</td>\n<td>请求已经被实现，⽽且有⼀个新的资源已经依据请求的需要⽽建⽴<br />通常是在POST请求，或是某些PUT请求之后创建了内容, 进行的返回的响应</td>\n</tr>\n<tr>\n<td>202</td>\n<td>Accepted</td>\n<td>请求服务器已接受，但是尚未处理，不保证完成请求<br />适合异步任务或者说需要处理时间比较长的请求，避免HTTP连接一直占用</td>\n</tr>\n<tr>\n<td>204</td>\n<td>No content</td>\n<td>表示请求成功，但响应报⽂不含实体的主体部分</td>\n</tr>\n<tr>\n<td>206</td>\n<td>Partial Content</td>\n<td>进⾏的是范围请求, 表示服务器已经成功处理了部分 GET 请求<br />响应头中会包含获取的内容范围 (常用于分段下载)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>重定向（3XX）</strong></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>原因短语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>301</td>\n<td>Moved Permanently</td>\n<td>永久性重定向，表示资源已被分配了新的 URL<br />比如，我们访问 <strong>http</strong>😕/www.baidu.com 会跳转到 <strong>https</strong>😕/www.baidu.com</td>\n</tr>\n<tr>\n<td>302</td>\n<td>Found</td>\n<td>临时性重定向，表示资源临时被分配了新的 URL, 支持搜索引擎优化<br />首页, 个人中心, 遇到了需要登录才能操作的内容, 重定向 到 登录页</td>\n</tr>\n<tr>\n<td>303</td>\n<td>See Other</td>\n<td>对于POST请求，它表示请求已经被处理，客户端可以接着使用GET方法去请求Location里的URI。</td>\n</tr>\n<tr>\n<td><strong>304</strong></td>\n<td><strong>Not Modified</strong></td>\n<td><strong>自从上次请求后，请求的网页内容未修改过。<br />服务器返回此响应时，不会返回网页内容。(协商缓存)</strong></td>\n</tr>\n<tr>\n<td>307</td>\n<td>Temporary Redirect</td>\n<td>对于POST请求，表示请求还没有被处理，客户端应该向Location里的URI重新发起POST请求。<br />不对请求做额外处理, 正常发送请求, 请求location中的url地址</td>\n</tr>\n</tbody>\n</table>\n<p>因为post请求, 是非幂等的,  从302中, 细化出了 303 和 307</p>\n<p>简而言之:</p>\n<ul>\n<li>301  302  307  都是重定向</li>\n<li>304 协商缓存</li>\n</ul>\n<p><strong>客户端错误（4XX）</strong></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>原因短语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>400</strong></td>\n<td><strong>Bad Request</strong></td>\n<td><strong>请求报⽂存在语法错误(（传参格式不正确）</strong></td>\n</tr>\n<tr>\n<td>401</td>\n<td>UnAuthorized</td>\n<td>权限认证未通过(没有权限)</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>表示对请求资源的访问被服务器拒绝</td>\n</tr>\n<tr>\n<td>404</td>\n<td>Not Found</td>\n<td>表示在服务器上没有找到请求的资源</td>\n</tr>\n<tr>\n<td>408</td>\n<td>Request Timeout</td>\n<td>客户端请求超时</td>\n</tr>\n<tr>\n<td>409</td>\n<td>Confict</td>\n<td>请求的资源可能引起冲突</td>\n</tr>\n</tbody>\n</table>\n<p><strong>服务端错误（5XX）</strong></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>原因短语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500</td>\n<td>Internal Sever Error</td>\n<td>表示服务器端在执⾏请求时发⽣了错误</td>\n</tr>\n<tr>\n<td>501</td>\n<td>Not Implemented</td>\n<td>请求超出服务器能⼒范围，例如服务器不⽀持当前请求所需要的某个功能，<br />或者请求是服务器不⽀持的某个⽅法</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Service Unavailable</td>\n<td>表明服务器暂时处于超负载或正在停机维护，⽆法处理请求</td>\n</tr>\n<tr>\n<td>505</td>\n<td>Http Version Not Supported</td>\n<td>服务器不⽀持，或者拒绝⽀持在请求中使⽤的 HTTP 版本</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_7-http的keep-alive是什么作用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_7-http的keep-alive是什么作用\" aria-hidden=\"true\">#</a> 7. HTTP的keep-alive是什么作用？</h2>\n<p>作用：使客户端到服务器端的连接<strong>持续有效</strong>(长连接)，当出现对服务器的后继请求时，</p>\n<p>Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p>早期 HTTP/1.0 在每次请求的时候，都要创建⼀个新的连接，⽽创建连接的过程需要消耗资源和时间，</p>\n<p>为了减少资源消耗、缩短响应时间，就需要复⽤已有连接。</p>\n<p>在后来的 HTTP/1.0 以及 HTTP/1.1 中引⼊了复⽤连接的机制，也就是在请求头中加⼊Connection: keep-alive，</p>\n<p>以此告诉对⽅这个请求响应完成后不要关闭连接，下⼀次还⽤这个请求的连接进行后续交流。</p>\n<p><strong>协议规定，如果想要保持连接，则需要在请求头中加上 Connection: keep-alive。</strong></p>\n<p><strong>keep-alive 的优点</strong> (复用连接)</p>\n<ul>\n<li>较少的 CPU 和内存的占⽤（因为要打开的连接数变少了, 复用了连接）</li>\n<li>减少了后续请求的延迟（⽆需再进⾏握⼿）</li>\n<li>...</li>\n</ul>\n<p>缺点: 因为在处理的暂停期间，本来可以释放的资源仍旧被占用。请求已经都结束了, 但是还一直连接着也不合适</p>\n<p>解决：Keep-Alive: timeout=5, max=100</p>\n<ul>\n<li>\n<p>timeout：过期时间5秒（对应httpd.conf里的参数是：KeepAliveTimeout），</p>\n</li>\n<li>\n<p>max是最多一百次请求，强制断掉连接。</p>\n<p>就是在timeout时间内又有新的连接过来，同时max会自动减1，直到为0，强制断掉。</p>\n</li>\n</ul>\n<h2 id=\"_8-为什么需要https\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_8-为什么需要https\" aria-hidden=\"true\">#</a> 8. 为什么需要HTTPS？</h2>\n<p>HTTPS 是安全版的 HTTP。</p>\n<p>HTTP 协议在传输数据时采用的是明⽂方式传递，因此，⼀些敏感信息的传输就变得很不安全。</p>\n<p>而 HTTPS 就是为了解决 HTTP 的不安全⽽产⽣的。</p>\n<h2 id=\"_9-https是如何保证安全的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-https是如何保证安全的\" aria-hidden=\"true\">#</a> 9. HTTPS是如何保证安全的？</h2>\n<p>HTTPS 在传输数据的过程中会对数据进行加密处理，保证安全性。</p>\n<p>那HTTPS采用的什么样的加密方式呢？我们来了解下一些加密的基本概念。</p>\n<p>目前常见的加密算法可以分成三类，对称加密算法，非对称加密算法和Hash算法。</p>\n<h3 id=\"_9-1-什么是对称加密\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-1-什么是对称加密\" aria-hidden=\"true\">#</a> 9.1 <strong>什么是对称加密？</strong></h3>\n<p>对称加密的特点是文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥，</p>\n<p>这种方法在密码学中叫做对称加密算法，对称加密算法使用起来简单快捷，密钥较短，且破译困难</p>\n<p>通信的双⽅都使⽤同⼀个秘钥进⾏加解密。⽐如，两个人事先约定的暗号，就属于对称加密。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306005550796\" originSrc=\"images/image-20210306005550796.png\" data=\"aurora\"></p>\n<p>对称加密的特点是：</p>\n<ul>\n<li>\n<p>优点:</p>\n<p>计算量小、加密速度快、加密效率高。</p>\n</li>\n<li>\n<p>缺点:</p>\n<p>在数据传送前，发送方和接收方必须商定好秘钥，然后双方保存好秘钥。</p>\n<p>如果一方的秘钥被泄露，那么加密信息也就不安全了</p>\n</li>\n</ul>\n<p>使用场景：本地数据加密、https通信、网络传输等</p>\n<p>常见算法：AES、DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6</p>\n<h3 id=\"_9-2-什么是非对称加密\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-2-什么是非对称加密\" aria-hidden=\"true\">#</a> 9.2 <strong>什么是⾮对称加密？</strong></h3>\n<p>而加密和解密其实可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，</p>\n<p>这样就避免了直接传递密钥。这种新的加密模式被称为&quot;非对称加密算法&quot;。</p>\n<p>通信的双方使用不同的秘钥进行加密解密，即秘钥对（私钥 + 公钥）。</p>\n<p>特征: 私钥可以解密公钥加密的内容,  公钥可以解密私钥加密的内容</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306011528361\" originSrc=\"images/image-20210306011528361.png\" data=\"aurora\"></p>\n<p>非对称加密的特点是：</p>\n<ul>\n<li>\n<p>优点：非对称加密与对称加密相比其安全性更好</p>\n</li>\n<li>\n<p>缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>\n</li>\n</ul>\n<p>使用场景：https会话前期、CA数字证书、信息加密、登录认证等</p>\n<p>常见算法：RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）</p>\n<h3 id=\"_9-3-https-加密解决方案\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-3-https-加密解决方案\" aria-hidden=\"true\">#</a> 9.3 <strong>HTTPS 加密解决⽅案</strong></h3>\n<p>结合了两种加密⽅式：</p>\n<ul>\n<li>\n<p>将 <code>对称加密的密钥</code> ⽤非对称加密的公钥, 进⾏加密并发送出去，接收⽅使⽤私钥解密得到 <code>对称加密密钥</code></p>\n</li>\n<li>\n<p>双⽅沟通时使⽤ <code>对称加密密钥</code> 进⾏</p>\n</li>\n</ul>\n<p><strong>可以看到，只有在发送秘钥阶段才使用非对称加密，而后续的通信都使用对称加密，这样解决了性能问题。</strong></p>\n<p>HTTPS 目前所使用的 TLS或SSL协议,  就是目前采用的加密通道的规范协议</p>\n<p>它利用对称加密、(公私钥)非对称加密, 以及其密钥交换算法，可完成可信任的信息传输</p>\n<h3 id=\"_9-4-数字证书\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-4-数字证书\" aria-hidden=\"true\">#</a> 9.4 数字证书</h3>\n<p>为了安全性, 一般还需要签发数字证书!</p>\n<p>客户端 和 服务器端要初步互通消息时,  客户端发送请求可以拿到公开的公钥信息</p>\n<p>进而进行非对称加密, 使用公钥, 加密<code>对称加密密钥</code>, 传递给服务器, 后续通信都使用对称加密!</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306020401732\" originSrc=\"images/image-20210306020401732.png\" data=\"aurora\"></p>\n<p><strong>问题是: 初步互通消息时, 如果请求拿到的公钥信息, 就是假的, 或者不安全的! 那么后续的所有操作, 都将是不安全的!</strong></p>\n<p>所以, 就需要有数字证书(CA证书),  一般是CA机构颁发的, 证明这个公钥是安全可靠的!</p>\n<p><strong>CA证书中心会对你网站的公钥, 网站的域名地址,  证书到期时间, 等一些相关信息一起加密签发数字证书, 保证你网站的安全性</strong></p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306014409595\" originSrc=\"images/image-20210306014409595.png\" data=\"aurora\"></p>\n<p>当公司申请了 CA 证书后, 就应该在响应时, 将数字证书一起发送给客户端</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306021013686\" originSrc=\"images/image-20210306021013686.png\" data=\"aurora\"></p>\n<p>而客户端, 接收到消息后, 就可以查看证书</p>\n<ol>\n<li>\n<p>如果正在访问的网站 和 证书记载的网址 不一致, 说明不安全,  可能被冒用, 浏览器就会发出警告!!!</p>\n</li>\n<li>\n<p>如果签发证书的机构, 不权威, 发出警告</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306021532010\" originSrc=\"images/image-20210306021532010.png\" data=\"aurora\"></p>\n</li>\n<li>\n<p>如果证书过期了, 浏览器也会发出警告</p>\n</li>\n</ol>\n<h3 id=\"_9-5-数字签名\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9-5-数字签名\" aria-hidden=\"true\">#</a> 9.5 数字签名</h3>\n<p>但这还是有问题：如果证书被篡改了怎么办?</p>\n<p>这时就需要用⼀个技术：<strong>数字签名</strong>。 (根据证书内容, 生成的一个唯一标识)</p>\n<p>数字签名就是先⽤ <strong>CA ⾃带的 Hash 算法来计算出证书内容的⼀个摘要</strong>，然后使⽤ CA 私钥进行加密，组成数字签名。</p>\n<p>当别⼈把他的证书发过来时，<strong>接收方⽤同样的算法再次⽣成摘要</strong>，⽤ CA 公钥解密后得到CA生成的摘要，两者进行对⽐后,</p>\n<p>就能确定中间是否被⼈篡改。这样就能最⼤程度的保证通信的安全了。</p>\n<p><a href=\"https://blog.csdn.net/u014044812/article/details/80723009\" target=\"_blank\" rel=\"noopener noreferrer\">博客参考<ExternalLinkIcon/></a></p>\n<h2 id=\"_10-http2和http1-x比-有什么优势和特点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_10-http2和http1-x比-有什么优势和特点\" aria-hidden=\"true\">#</a> 10. HTTP2和HTTP1.x比，有什么优势和特点？</h2>\n<ol>\n<li>HTTP/2 采⽤<code>⼆进制格式</code>来传输数据，⽽⾮ HTTP 1.x 的⽂本格式，⼆进制协议<code>解析起来更⾼效</code></li>\n<li>HTTP/2 采用一些<code>头部压缩技术</code>，减少在请求和响应头中重复携带的数据，<code>降低网络负担</code></li>\n<li>HTTP/2 采⽤<code>服务器推送</code>方式，主动向客户端推送资源，提高页面加载效率</li>\n<li>HTTP/2 采⽤<code>多路复用机制</code>，减少需要创建的连接数量，降低资源占用和性能消耗</li>\n</ol>\n<p>下面是一些与之关联的技术知识。</p>\n<p><strong>⼆进制格式分帧</strong></p>\n<p>帧：HTTP/2 数据通信的最⼩单位消息，是指 HTTP/2 中逻辑上的 HTTP 消息（例如请求、响应等）。消息由⼀个或多个帧组成</p>\n<p>流：存在于连接中的⼀个虚拟通道，它可以承载双向消息，且每个流都有唯⼀的整数ID</p>\n<p><strong>头部压缩</strong></p>\n<p>在 HTTP/1.x 中，请求和响应中会重复携带一些不常改变、冗⻓的头数据，给⽹络带来额外负担。</p>\n<p>在 HTTP/2 中，客户端和服务端使⽤ <strong>“⾸部表”</strong> 来跟踪和存储之前发送过的键值对，</p>\n<p>相同的数据不再随着每次请求和响应发送。⾸部表在连接存续期间始终存在，由客户端和服务器共同渐进更新。</p>\n<p>每个新的⾸部键值对，要么被追加到当前表的末尾，要么替换表中已存在的键值对。</p>\n<blockquote>\n<p>可以简单的理解为：只发送差异数据，⽽不是全部发送，从⽽减少头部的信息量</p>\n</blockquote>\n<p>下图为首部表的更新示意图：</p>\n<img src=\"/images/image-20210219160534616.png\" alt=\"image-20210219160534616\" style=\"zoom:30%;\" />\n<p><strong>服务器推送</strong></p>\n<p>服务端可以在发送⻚⾯ HTML 内容时，再主动推送一些其它资源，⽽不⽤等到浏览器解析到相应的位置时发起请求后再作响应。</p>\n<p>例如，服务端可以主动把 JS 和 CSS ⽂件推送给客户端，⽽不需要客户端解析 HTML 时再发送这些请求。</p>\n<p>不过，服务端的主动推送行为，客户端有权利选择是否要接收。</p>\n<p>如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。</p>\n<p><strong>多路复用</strong></p>\n<p>在 HTTP 1.x 中如果想并发多个请求的话，必须使⽤多个 TCP 链接，但浏览器为了控制资源，</p>\n<p>会对单个域名有 6-8 个 TCP 链接的数量限制。而在 HTTP 2 中：</p>\n<ul>\n<li>同域名下的所有通信，都在单个连接上完成</li>\n<li>单个连接可以承载任意数量的双向数据流</li>\n<li>数据流以消息的形式发送，⽽消息⼜由⼀个或多个帧组成（多个帧可以乱序发送，因为可以根据帧⾸部的流标识来重新组装）</li>\n</ul>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210306023912779\" originSrc=\"images/image-20210306023912779.png\" data=\"aurora\"></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/30166894\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：HTTP/2特性及其在实际应用中的表现<ExternalLinkIcon/></a></p>\n<h2 id=\"_11-http缓存控制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-http缓存控制\" aria-hidden=\"true\">#</a> 11. http缓存控制</h2>\n<h3 id=\"_11-1-基本认知\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-1-基本认知\" aria-hidden=\"true\">#</a> 11.1 基本认知</h3>\n<p><strong>Web 服务缓存</strong> 大致可以分为：数据库缓存、服务器端缓存（代理服务器缓存、CDN 服务器缓存）、浏览器缓存。</p>\n<p><strong>浏览器缓存</strong> 也包含很多内容： HTTP 缓存、indexDB、cookie、localstorage 等等。<strong><code>这里我们只讨论 HTTP 缓存相关内容</code>。</strong></p>\n<p><strong>HTTP缓存</strong>:</p>\n<ul>\n<li><strong>强缓存</strong></li>\n<li><strong>协商缓存</strong></li>\n</ul>\n<p>在具体了解 HTTP 缓存之前先来明确几个术语：</p>\n<ul>\n<li>缓存命中率：从缓存中得到数据的请求数  与    所有请求数的比率。理想状态是越高越好。</li>\n<li>过期内容：超过设置的有效时间，被标记为“陈旧”的内容。</li>\n<li>验证：验证缓存中的过期内容是否仍然有效，验证通过的话刷新过期时间。</li>\n<li>失效：失效就是把内容从缓存中移除。</li>\n</ul>\n<p><strong>浏览器缓存主要是 HTTP 协议定义的缓存机制。</strong></p>\n<p><strong>浏览器缓存, HTTP缓存分类</strong></p>\n<p>浏览器缓存分为<code>强缓存 </code>和 <code>协商缓存</code>，浏览器加载一个页面的简单流程如下：</p>\n<ol>\n<li>\n<p>浏览器先根据这个资源的  <strong>http头信息</strong>  来 <strong>判断是否命中强缓存</strong>。</p>\n<p>如果命中则直接加载在缓存中的资源，并不会将请求发送到服务器。（强缓存）</p>\n</li>\n<li>\n<p>如果未命中强缓存，则浏览器会将资源加载请求发送到服务器。</p>\n<p>服务器来判断浏览器本地缓存是否失效。</p>\n<p>若可以使用，则服务器并不会返回资源信息，浏览器继续从缓存加载资源。（协商缓存）</p>\n</li>\n<li>\n<p>如果未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存。（新的请求）</p>\n</li>\n</ol>\n<h3 id=\"_11-2-强缓存-食品过期时间判断\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-2-强缓存-食品过期时间判断\" aria-hidden=\"true\">#</a> 11.2 强缓存  (食品过期时间判断)</h3>\n<p><strong>(进行判断, 是否资源过期, 如果未过期, 直接用缓存)</strong></p>\n<p><strong>强缓存</strong></p>\n<p>命中强缓存时，浏览器并不会将请求发送给服务器。</p>\n<p>在Chrome的开发者工具中看到http的返回码是200，但是在Size列会显示为(from cache)。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"images/940884-20180423141536107-329179455.png\" data=\"aurora\"></p>\n<p>强缓存是利用http的返回的响应头中的Expires或者Cache-Control (优先级更高) 两个字段来控制的，用来表示资源的缓存时间。</p>\n<p>Expires: 指定一个具体时间(2020年12月12日 17:00), 到了这个时间了, 缓存过期了, 在时间内, 都是有效的, 可以直接读</p>\n<p>Cache-Control : 指定一个过期时间 (3600s), 这个资源你加载到后, 可以用 3600s</p>\n<p><strong>Expires</strong></p>\n<p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。</p>\n<p>Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20201209080705571\" originSrc=\"D:/z_work/72%E6%9C%9F/%E9%9D%A2%E8%AF%95%E5%8A%A0%E5%BC%BA%E8%AF%BE-day02/02-%E7%AC%94%E8%AE%B0/asset/image-20201209080705571.png\" data=\"aurora\"></p>\n<p>该字段会返回一个时间，比如Expires:  Wed, 23 Nov 2050 16:00:01 GMT 。这个时间代表着这个资源的失效时间，也就是说在xx年xx月xx日时间之前都是有效的，即命中缓存。</p>\n<p>这种方式有一个明显的缺点，由于失效时间是一个<code>绝对时间</code>，所以当 <strong>服务器与客户端 时间偏差很大</strong>  以后，就会导致缓存混乱。于是发展出了Cache-Control。</p>\n<p><strong>Cache-Control</strong></p>\n<p>Cache-Control是一个<code>相对时间</code>，例如Cache-Control:max-age 3600，代表着资源的有效期是3600秒。</p>\n<p>由于是相对时间，并且都是与客户端时间比较，所以服务器与客户端时间偏差也不会导致问题。</p>\n<p>Cache-Control与Expires可以在服务端配置同时启用或者启用任意一个，同时启用的时候Cache-Control优先级高。</p>\n<p>Cache-Control 可以由多个字段组合而成，主要有以下几个取值：</p>\n<ol>\n<li>\n<p><strong>max-age</strong> 指定一个时间长度，在这个时间段内缓存是有效的，单位是s。</p>\n<p>例如设置 Cache-Control:max-age=31536000，也就是说缓存有效期为（31536000 / 24 / 60 / 60）天，</p>\n<p>第一次访问这个资源的时候，服务器端也返回了 Expires 字段，并且过期时间是一年后。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"D:/z_work/72%E6%9C%9F/%E9%9D%A2%E8%AF%95%E5%8A%A0%E5%BC%BA%E8%AF%BE-day02/02-%E7%AC%94%E8%AE%B0/asset/940884-20180423141638673-1917674992.png\" data=\"aurora\"></p>\n<p>在没有禁用缓存并且没有超过有效时间的情况下，再次访问这个资源就命中了缓存，不会向服务器请求资源而是直接从浏览器缓存中取。</p>\n</li>\n<li>\n<p><strong>no-cache</strong> 强制所有缓存了该响应的用户，在使用已缓存的数据前，发送带验证的请求到服务器, 问服务器是否可以读缓存。</p>\n<p>不是字面意思上的不缓存。</p>\n</li>\n<li>\n<p><strong>no-store</strong> 禁止缓存，每次请求都要向服务器重新获取数据。</p>\n</li>\n</ol>\n<h3 id=\"_11-3-协商缓存-找供货商专家协商\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-3-协商缓存-找供货商专家协商\" aria-hidden=\"true\">#</a> 11.3 协商缓存 (找供货商专家协商)</h3>\n<p>看看过期时间, 食品没过期, 直接吃 (直接读缓存, 不发请求)   强缓存</p>\n<p>食品过期时间过了,  能不能吃呢?  问问专家(服务器),  专家瞅了一眼, 没过期 (响应304, 不返回内容) , 直接吃          (协商缓存)</p>\n<p>如果问过专家(服务器), 专家瞅了一眼, 呀真过期了, 原来的不要了, 我重新给你发一个 (响应200, 并返回内容)</p>\n<p><strong>协商缓存</strong></p>\n<p>若未命中强缓存(强缓存过期了)，则浏览器会将请求发送至服务器。</p>\n<p>服务器根据http头信息中的<code>Last-Modify/If-Modify-Since</code>或<code>Etag/If-None-Match</code>来判断是否命中协商缓存。</p>\n<p>如果命中，则http返回码为304 (你本地之前加载的资源是有效的)，浏览器从缓存中加载资源。</p>\n<p><strong>Last-Modify/If-Modify-Since</strong></p>\n<p>浏览器第一次请求一个资源的时候, 服务器返回的header中会加上Last-Modify，</p>\n<p>Last-modify是一个时间标识该资源的<strong>最后修改时间</strong>，例如<code>Last-Modify: Thu,31 Dec 2037 23:59:59 GMT</code>。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"D:/z_work/72%E6%9C%9F/%E9%9D%A2%E8%AF%95%E5%8A%A0%E5%BC%BA%E8%AF%BE-day02/02-%E7%AC%94%E8%AE%B0/asset/940884-20180423141852114-1757065670.png\" data=\"aurora\"></p>\n<p>当浏览器再次请求该资源时，发送的请求头中会包含If-Modify-Since，<strong>该值为缓存之前返回的Last-Modify</strong>。</p>\n<p>服务器收到If-Modify-Since后，根据实际服务器的资源的最后修改时间, 进行判断是否命中缓存。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"images/940884-20180423141732879-1484228353.png\" data=\"aurora\"></p>\n<p>如果命中缓存，则返回 <strong>http304</strong>，并且不会返回资源内容，并且不会返回Last-Modify。</p>\n<p>由于对比的是服务端时间，所以客户端与服务端时间差距不会导致问题。</p>\n<p><strong>但是有时候通过最后修改时间来判断资源是否修改还是不太准确（资源变化了最后修改时间也可以一致）。</strong></p>\n<p>比如: 最后修改只能精确到秒级, 一秒进行了多次修改, 就不行了,  <strong>于是出现了ETag/If-None-Match。</strong></p>\n<p><strong>ETag/If-None-Match</strong></p>\n<p>与Last-Modify/If-Modify-Since (最后修改时间)不同的是，Etag/If-None-Match返回的是一个校验码（ETag: entity tag）。</p>\n<p>ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。</p>\n<p>ETag值的变更则说明资源状态已经被修改。</p>\n<p>服务器根据浏览器上发送的If-None-Match值来判断是否命中缓存。</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"D:/z_work/72%E6%9C%9F/%E9%9D%A2%E8%AF%95%E5%8A%A0%E5%BC%BA%E8%AF%BE-day02/02-%E7%AC%94%E8%AE%B0/asset/940884-20180423141918779-1206116367.png\" data=\"aurora\"></p>\n<p>ETag生成靠以下几种因子</p>\n<ol>\n<li>\n<p>文件的i-node编号，是Linux/Unix用来识别文件的编号。</p>\n</li>\n<li>\n<p>文件最后修改时间</p>\n</li>\n<li>\n<p>文件大小</p>\n<p>...</p>\n</li>\n</ol>\n<p>生成Etag的时候，可以使用其中一种或几种因子，使用抗碰撞散列函数来生成。生成一个标记文件的唯一值</p>\n<p><strong>既生 Last-Modified 何生 Etag ？</strong></p>\n<p>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？</p>\n<p>Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>\n<ol>\n<li>\n<p>Last-Modified标注的最后修改只能精确到秒级</p>\n<p>如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间</p>\n</li>\n<li>\n<p>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</p>\n</li>\n</ol>\n<p>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加 <strong>准确的控制缓存。</strong></p>\n<p>不会仅仅只根据最后的修改时间判断是否进行使用缓存</p>\n<p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，</p>\n<p>最后才决定是否返回304。</p>\n<p>小结:</p>\n<ul>\n<li>\n<p>强缓存: 大大的减少了 服务器的请求次数, 在过期时间内, 直接从客户端内存中读</p>\n</li>\n<li>\n<p>协商缓存: 强缓存命中失效了, 超过过期时间了, 拿着标识(最后的修改时间,  唯一标识etag), 去问服务器, 是否真的过期了</p>\n<p>如果验证通过,  服务器会直接响应 304, 且不会返回资源</p>\n</li>\n</ul>\n<h3 id=\"_11-4-整体请求缓存流程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11-4-整体请求缓存流程\" aria-hidden=\"true\">#</a> 11.4 整体请求缓存流程</h3>\n<p><strong>浏览器第一次请求</strong></p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"D:/z_work/72%E6%9C%9F/%E9%9D%A2%E8%AF%95%E5%8A%A0%E5%BC%BA%E8%AF%BE-day02/02-%E7%AC%94%E8%AE%B0/asset/940884-20180423141945261-83532090.png\" data=\"aurora\"></p>\n<p><strong>浏览器第二次请求</strong></p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"img\" originSrc=\"D:/z_work/72%E6%9C%9F/%E9%9D%A2%E8%AF%95%E5%8A%A0%E5%BC%BA%E8%AF%BE-day02/02-%E7%AC%94%E8%AE%B0/asset/940884-20180423141951735-912699213.png\" data=\"aurora\"></p>\n<hr>\n<h1 id=\"tcp\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tcp\" aria-hidden=\"true\">#</a> TCP</h1>\n<h2 id=\"tcp的特性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tcp的特性\" aria-hidden=\"true\">#</a> TCP的特性</h2>\n<p>主要有以下5点特性：</p>\n<ol>\n<li>\n<p>TCP 提供⼀种⾯向连接的、可靠的字节流服务</p>\n</li>\n<li>\n<p>在⼀个 TCP 连接中，仅有两⽅进⾏彼此通信（⼴播和多播不能⽤于 TCP）</p>\n</li>\n<li>\n<p>TCP 使⽤校验、确认和重传机制来保证可靠传输</p>\n</li>\n<li>\n<p>TCP 将数据分节进⾏排序，并使⽤累积来确认保证数据的顺序不变和⾮重复</p>\n</li>\n<li>\n<p>TCP 使⽤滑动窗⼝机制来实现流量控制，通过动态改变窗⼝的⼤⼩进⾏拥塞控制</p>\n</li>\n</ol>\n<h2 id=\"简述-tcp-和-udp-的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简述-tcp-和-udp-的区别\" aria-hidden=\"true\">#</a> 简述 TCP 和 UDP 的区别</h2>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>连接性</th>\n<th>双工性</th>\n<th>可靠性</th>\n<th>有序性</th>\n<th>有界性</th>\n<th>拥塞控制</th>\n<th>传输速度</th>\n<th>量级</th>\n<th>头部大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>⾯向连接</td>\n<td>全双工 1:1</td>\n<td>可靠，有重传机制</td>\n<td>有序，通过SYN排序</td>\n<td>无边界，有粘包情况</td>\n<td>有</td>\n<td>慢</td>\n<td>低</td>\n<td>20~60字节</td>\n</tr>\n<tr>\n<td>UDP</td>\n<td>无连接</td>\n<td>n:m</td>\n<td>不可靠，丢包后数据丢失</td>\n<td>无序</td>\n<td>有边界，无粘包</td>\n<td>无</td>\n<td>快</td>\n<td>高</td>\n<td>8字节</td>\n</tr>\n</tbody>\n</table>\n<p>UDP socket ⽀持 n 对 m 的连接状态。在 Node.js 官⽅⽂档中有写到在 <code>dgram.createSocket(options[, callback]) </code> 中的 <code>options</code> 中可指定 <code>reuseAddr</code> 为 <code>SO_REUSEADDR</code> 标志，通过它可以简单的实现 n 对 m 的多播特性 (仅在⽀持多播的操作系统上才有用)。</p>\n<h2 id=\"什么是-tcp-粘包-怎么处理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是-tcp-粘包-怎么处理\" aria-hidden=\"true\">#</a> 什么是 TCP 粘包，怎么处理？</h2>\n<p>TCP 连接在默认情况下会启⽤延迟传送算法 (Nagle算法)，它在数据发送前进行缓存数据，如短时间内有多个数据发送，会缓冲后再作⼀次发送操作 (缓冲区⼤⼩可⻅ <code>socket.bufferSize</code>)，这样可以减少 IO 产生的消耗，提⾼了性能。</p>\n<p>在传输⽂件的情况下，不⽤处理粘包问题，接收到⼀个包就拼接⼀个包就行了。但是，如果是传输多条消息、或是别的⽤途的数据，那么就需要处理粘包。可参⻅⽹上流传甚⼴的⼀个例⼦：连续调⽤两次 <code>send</code> 分别发送两段数据 data1 和 data2，则在接收端会有以下⼏种常⻅情况出现:</p>\n<ul>\n<li>\n<p>A. 先收到 data1，然后收到 data2</p>\n</li>\n<li>\n<p>B. 先收到 data1 的部分数据，然后收到 data1 余下的部分以及 data2 的全部</p>\n</li>\n<li>\n<p>C. 先收到 data1 的全部数据和 data2 的部分数据，然后收到 data2 的余下的数据</p>\n</li>\n<li>\n<p>D. ⼀次性收到 data1 和 data2 的全部数据</p>\n</li>\n</ul>\n<p>以上情况中的 <code>B、C、D</code> 三种，就是常⻅的粘包情况。而处理粘包问题的常⻅⽅案有：</p>\n<p><strong>方案一：多次发送之前间隔⼀个等待时间</strong></p>\n<p>只需等待⼀段时间再做下⼀次<code>send</code> 发送操作就可以了。</p>\n<ul>\n<li>\n<p>它适⽤于交互频率特别低的场景</p>\n</li>\n<li>\n<p>对于交互频繁的场景来说， 其传输效率太低。</p>\n</li>\n</ul>\n<p><strong>方案二：关闭 Nagle 算法</strong></p>\n<p>在 Node.js 中你可以通过 <code>socket.setNoDelay()</code> ⽅法来关闭 Nagle 算法，让每次 send 都不缓冲而直接发送。</p>\n<ul>\n<li>\n<p>该⽅法适⽤于每次发送的数据都⽐较⼤ (但不是如⽂件那么⼤)， 并且频率不特别⾼的场景</p>\n</li>\n<li>\n<p>如果是每次发送的数据量⽐较⼩且频率特别⾼的话，这种方式纯属⾃废武功</p>\n</li>\n<li>\n<p>该⽅法也不适⽤于⽹络较差的情况，因为 Nagle 算法是在服务端进⾏的包合并情况，但如果短时间内客户端的⽹络</p>\n</li>\n</ul>\n<p>情况不好、或者应⽤层由于某些原因不能及时将 TCP 的数据 <code>recv</code>，就会造成多个包在客户端缓冲从⽽粘包的情况</p>\n<p><strong>方案三：进⾏封包/拆包</strong></p>\n<p>这是⽬前业内最常⻅的解决⽅案，即在发送每个数据包之前，将⼀些有特征的数据放在数据包前/后，然后在收到数据的时</p>\n<p>候，根据特征数据来分割出各个数据包。</p>\n<h2 id=\"你知道哪些常用的端口号-以及它们对应的服务\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#你知道哪些常用的端口号-以及它们对应的服务\" aria-hidden=\"true\">#</a> 你知道哪些常用的端口号，以及它们对应的服务？</h2>\n<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>21</td>\n<td>主要⽤于FTP（File Transfer Protocol，⽂件传输协议）服务</td>\n</tr>\n<tr>\n<td>23</td>\n<td>主要⽤于Telnet（远程登录）服务，是Internet上普遍采⽤的登录和仿真程序</td>\n</tr>\n<tr>\n<td>25</td>\n<td>为 SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）服务器所开放，主要⽤于发送邮件，如今绝⼤多数邮件服务器都使⽤该协议</td>\n</tr>\n<tr>\n<td>53</td>\n<td>为DNS（Domain Name Server，域名服务器）服务器所开放，主要⽤于域名解析，DNS服务在NT系统中使⽤的最为⼴泛</td>\n</tr>\n<tr>\n<td>67、68</td>\n<td>分别是为 Bootp 服务的 Bootstrap Protocol Server（引导程序协议服务端）和 Bootstrap Protocol Client（引导程序协议客户端）开放的端⼝</td>\n</tr>\n<tr>\n<td>69</td>\n<td>TFTP是Cisco公司开发的⼀个简单⽂件传输协议，类似于FTP</td>\n</tr>\n<tr>\n<td>79</td>\n<td>为Finger服务开放的，主要⽤于查询远程主机在线⽤户、操作系统类型以及是否缓冲区溢出等⽤户的详细信息</td>\n</tr>\n<tr>\n<td>80</td>\n<td>为HTTP（HyperText Transport Protocol，超⽂本传输协议）开放的，这是上⽹冲浪使⽤最多的协议，主要⽤于在WWW（World WideWeb，万维⽹）服务上传输信息的协议</td>\n</tr>\n<tr>\n<td>99</td>\n<td>⽤于⼀个名为“Metagram Relay”（亚对策延时）的服务，该服务⽐较少⻅，⼀般是⽤不到的</td>\n</tr>\n<tr>\n<td>109、110</td>\n<td>为POP2（Post Office Protocol Version 2，邮局协议2）服务开放的，110 端⼝是为 POP3（邮件协议3）服务开放的，POP2、POP3都是主要⽤于接收邮件的</td>\n</tr>\n<tr>\n<td>111</td>\n<td>是SUN公司的 RPC（Remote ProcedureCall，远程过程调⽤）服务所开放的端⼝，主要⽤于分布式系统中不同计算机的内部进程通信，RPC在多种⽹络服务中都是很重要的组件</td>\n</tr>\n<tr>\n<td>113</td>\n<td>主要⽤于Windows的“Authentication Service”（验证服务）</td>\n</tr>\n<tr>\n<td>119</td>\n<td>是为“Network News TransferProtocol”（⽹络新闻组传输协议，简称NNTP）开放的</td>\n</tr>\n<tr>\n<td>135</td>\n<td>主要⽤于使⽤RPC（Remote Procedure Call，远程过程调⽤）协议并提供DCOM（分布式组件对象模型）服务</td>\n</tr>\n<tr>\n<td>137</td>\n<td>主要⽤于“NetBIOS Name Service”（NetBIOS名称服务）</td>\n</tr>\n<tr>\n<td>139</td>\n<td>是为“NetBIOS Session Service”提供的，主要⽤于提供Windows⽂件和打印机共享以及Unix中的Samba服务</td>\n</tr>\n<tr>\n<td>143</td>\n<td>主要是⽤于“Internet Message Access Protocol”v2（Internet消息访问协议，简称IMAP）</td>\n</tr>\n<tr>\n<td>161</td>\n<td>是⽤于“Simple Network Management Protocol”（简单⽹络管理协议，简称SNMP）</td>\n</tr>\n<tr>\n<td>443</td>\n<td>⽹⻚浏览端⼝，主要是⽤于HTTPS服务，是提供加密和通过安全端⼝传输的另⼀种HTTP</td>\n</tr>\n<tr>\n<td>554</td>\n<td>默认情况下⽤于“Real Time Streaming Protocol”（实时流协议，简称RTSP）</td>\n</tr>\n<tr>\n<td>1024</td>\n<td>⼀般不固定分配给某个服务，在英⽂中的解释是“Reserved”（保留）</td>\n</tr>\n<tr>\n<td>1080</td>\n<td>是Socks代理服务使⽤的端⼝，⼤家平时上⽹使⽤的WWW服务使⽤的是HTTP协议的代理服务</td>\n</tr>\n<tr>\n<td>1755</td>\n<td>默认情况下⽤于“Microsoft Media Server”（微软媒体服务器，简称MMS）</td>\n</tr>\n<tr>\n<td>4000</td>\n<td>是⽤于⼤家经常使⽤的QQ聊天⼯具的，再细说就是为QQ客户端开放的端⼝，QQ服务端使⽤的端⼝是8000</td>\n</tr>\n<tr>\n<td>5554</td>\n<td>⼀种针对微软lsass服务的新蠕⾍病毒——震荡波（Worm.Sasser）利⽤TCP 5554端⼝开启⼀个FTP服务，主要被⽤于病毒的传播</td>\n</tr>\n<tr>\n<td>5632</td>\n<td>5632端⼝是被⼤家所熟悉的远程控制软件pcAnywhere所开启的端⼝</td>\n</tr>\n<tr>\n<td>8080</td>\n<td>8080端⼝同80端⼝，是被⽤于WWW代理服务的，可以实现⽹⻚</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"一次完整的http服务过程是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一次完整的http服务过程是什么\" aria-hidden=\"true\">#</a> 一次完整的HTTP服务过程是什么</h2>\n<p>当我们在web浏览器的地址栏中输入：<code>www.baidu.com</code>，具体发生了什么？</p>\n<ol>\n<li>对<code>www.baidu.com</code>这个网址进行DNS域名解析，得到对应的IP地址</li>\n<li>根据这个IP，找到对应的服务器，发起TCP的三次握手 (<a href=\"https://blog.csdn.net/qq_38950316/article/details/81087809\" target=\"_blank\" rel=\"noopener noreferrer\">tcp 三次握手四次挥手<ExternalLinkIcon/></a> )</li>\n<li>建立TCP连接后发起HTTP请求</li>\n<li>服务器响应HTTP请求，浏览器得到html代码</li>\n<li>浏览器解析html代码，并请求html代码中的资源（如js、css、图片等）（先得到html代码，才能去找这些资源）</li>\n<li>浏览器对页面进行渲染呈现给用户</li>\n<li>服务器关闭关闭TCP连接</li>\n</ol>\n<p>注：</p>\n<p>1.DNS怎么找到域名的？</p>\n<blockquote>\n<p>DNS域名解析采用的是递归查询的方式，过程是，先去找DNS缓存-&gt;缓存找不到就去找根域名服务器-&gt;根域名又会去找下一级，这样递归查找之后，找到了，给我们的web浏览器</p>\n</blockquote>\n<p>2.为什么HTTP协议要基于TCP来实现？</p>\n<blockquote>\n<p>TCP是一个端到端的可靠面相连接的协议，HTTP基于传输层TCP协议不用担心数据传输的各种问题（当发生错误时，可以重传）</p>\n</blockquote>\n<p>3.最后一步浏览器是如何对页面进行渲染的？</p>\n<blockquote>\n<p>a）解析html文件构成 DOM树\nb）解析CSS文件构成渲染树\nc）边解析，边渲染\nd）JS 单线程运行，JS有可能修改DOM结构，意味着JS执行完成前，后续所有资源的下载是没有必要的，所以JS是单线程，会阻塞后续资源下载</p>\n</blockquote>\n<h2 id=\"什么是dns-解析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是dns-解析\" aria-hidden=\"true\">#</a> 什么是DNS 解析</h2>\n<p><strong>DNS解析（域名解析服务器）</strong></p>\n<p>假定请求的是 www.baidu.com</p>\n<p>a）首先会搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存）</p>\n<p>b）如果浏览器自身的缓存里面没有找到，那么浏览器会搜索系统自身的DNS缓存</p>\n<p>c）如果还没有找到，那么尝试从 hosts 文件里面去找</p>\n<p>d）在前面三个过程都没获取到的情况下，就递归地去域名服务器去查找(就近查找)，具体过程如下</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"dns域名解析\" originSrc=\"images/5rxqugj8dh.png\" data=\"aurora\"></p>\n<p>DNS优化两个方面：DNS缓存、DNS负载均衡 (准备多台dns服务器, 进行dns解析)</p>\n<h2 id=\"什么是三次握手\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是三次握手\" aria-hidden=\"true\">#</a> 什么是三次握手？</h2>\n<p>三次握⼿（Three-way Handshake）是指在建⽴⼀个 TCP 连接时，需要客户端和服务器总共发送 3 个包。</p>\n<p>三次握⼿的⽬的是连接服务器指定端⼝，建⽴ TCP 连接，并同步连接双⽅的序列号和确认号，交换 TCP 窗⼝⼤⼩信</p>\n<p>息。在 socket 编程中，客户端调用执行 <code>connect()</code> 时将触发三次握⼿。</p>\n<p>下图为三次握手的示意图：</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210219192116213\" originSrc=\"/images/image-20210219192116213.png\" data=\"aurora\"></p>\n<p><strong>第⼀次握⼿（SYN=1, seq=x）</strong></p>\n<p>客户端发送⼀个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端⼝，以及初始序号 X，保存在包头的序列号（Sequence Number）字段⾥。</p>\n<p>发送完毕后，客户端进⼊ SYN_SEND 状态。</p>\n<p><strong>第⼆次握⼿（SYN=1, ACK=1, seq=y, ACKnum=x+1）</strong></p>\n<p>服务器发回确认包（ACK）应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择⾃⼰ ISN 序列号，放到 Seq 域⾥，同时将确认序号（Acknowledgement Number）设置为客户的 ISN 加1，即 X + 1。</p>\n<p>发送完毕后，服务器端进⼊ SYN_RCVD 状态。</p>\n<p><strong>第三次握⼿（ACK=1，ACKnum=y+1）</strong></p>\n<p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对⽅，并且在数据段放写 ISN 的 +1。</p>\n<p>发送完毕后，客户端进⼊ ESTABLISHED 状态，当服务器端接收到这个包时，也进⼊ ESTABLISHED 状态，TCP 握⼿结束。</p>\n<h2 id=\"什么是四次挥手\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是四次挥手\" aria-hidden=\"true\">#</a> 什么是四次挥手？</h2>\n<p>四次挥⼿（Four-way handshake），也叫做改进的三次握⼿，TCP 连接的拆除需要发送四个包，客户端或服务器均可主动发起挥⼿动作，在 socket 编程中，任何⼀⽅执⾏ <code>close()</code> 操作即可产⽣挥⼿操作。</p>\n<p>下图为四次挥手示意图：</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210219192659983\" originSrc=\"/images/image-20210219192659983.png\" data=\"aurora\"></p>\n<p><strong>第⼀次挥⼿（FIN=1，seq=x）</strong></p>\n<p>假设客户端想要关闭连接，客户端发送⼀个 FIN 标志位置为1的包，表示⾃⼰已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进⼊ FIN_WAIT_1 状态。</p>\n<p><strong>第⼆次挥⼿（ACK=1，ACKnum=x+1）</strong></p>\n<p>服务器端确认客户端的 FIN 包，发送⼀个确认包，表明⾃⼰接受到了客户端关闭连接的请求，但还没有准备好关闭连接。发送完毕后，服务器端进⼊ CLOSE_WAIT 状态，客户端接收到这个确认包之后，进⼊ FIN_WAIT_2 状态，等待服务器端关闭连接。</p>\n<p><strong>第三次挥⼿（FIN=1，seq=y）</strong></p>\n<p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。发送完毕后，服务器端进⼊ LAST_ACK 状态，等待来⾃客户端的最后⼀个ACK。</p>\n<p><strong>第四次挥⼿（ACK=1，ACKnum=y+1）</strong></p>\n<p>客户端接收到来⾃服务器端的关闭请求，发送⼀个确认包，并进⼊ TIME_WAIT 状态，等待可能出现的要求重传的 ACK 包。服务器端接收到这个确认包之后，关闭连接，进⼊ CLOSED 状态。客户端等待了某个固定时间（两个最⼤段⽣命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是⾃⼰也关闭连接，进⼊ CLOSED 状态。</p>\n<h2 id=\"tcp-三次握手理解-双方确认\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tcp-三次握手理解-双方确认\" aria-hidden=\"true\">#</a> TCP 三次握手理解 (双方确认)</h2>\n<p>TCP是一个端到端的  <strong>可靠</strong>  面相连接的协议，</p>\n<p>HTTP基于传输层TCP协议不用担心数据传输的各种问题（当发生错误时，可以重传）</p>\n<p>根据这个IP，找到对应的服务器，发起TCP的三次握手 (<a href=\"https://blog.csdn.net/qq_38950316/article/details/81087809\" target=\"_blank\" rel=\"noopener noreferrer\">tcp 三次握手四次挥手<ExternalLinkIcon/></a> )</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20201209160422978\" originSrc=\"images/image-20201209160422978.png\" data=\"aurora\"></p>\n<p><strong>为什么要3次握手</strong></p>\n<p>我们假定第一次发送的请求,  因为网络延迟很慢才到达服务端，</p>\n<p>然后客户端以为这服务器居然不叼我，然后默默的关闭的等待连接的请求，走开了（好比追女神）；</p>\n<p>但事实呢？女神（服务器）是因为各种各样的原因，很晚才看到，然后说我接受你了, 同意你的要求咱们两结婚吧！</p>\n<p>但是，A早已经远走高飞，这个请求A完全不会收到（在第二次握手，服务端打开连接，等待客户端的响应），</p>\n<p>那么女生呢，以为对方收到了，就会一直等待，这样B的资源就会被浪费的（创建连接的时候，空间浪费以及端口消耗）；</p>\n<p>而三次握手, 就不会发生，服务端同意连接了，但是A缺一直没有下一步的动作，导致资源浪费；</p>\n<h2 id=\"关闭tcp连接四次挥手的理解-客气挽留\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关闭tcp连接四次挥手的理解-客气挽留\" aria-hidden=\"true\">#</a> 关闭TCP连接四次挥手的理解 (客气挽留)</h2>\n<p>关闭连接(四次挥手)</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20201209162908979\" originSrc=\"images/image-20201209162908979.png\" data=\"aurora\"></p>\n<p>这和有礼貌的好友道别一样：（a：客户端 b:服务端）\n1、一开始A想要回家离开，但是呢？怕B还有事情要交代，那么呢？只好先想B打招呼，我要走了，请求停止交谈（此时，a到B的连接没有断开，依旧可以进行通信）；\n2、同意A的请求，说好的，但是我这里可能还有一些话（数据）没说完。我检查看看,  你等等,  等我说完你再走。\n3、B确实没啥要补充的了，就告知你我可以散伙了\n4、A说好的，知道了，88；（B得知A走开了，关闭了自己的连接 )</p>\n<h2 id=\"浏览器解析响应\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#浏览器解析响应\" aria-hidden=\"true\">#</a> 浏览器解析响应</h2>\n<p><strong>浏览器解析html代码，并请求html代码中的资源</strong></p>\n<p><strong>浏览器对页面进行渲染呈现给用户</strong></p>\n<p>最后，浏览器利用自己内部的工作机制，把请求的静态资源和html代码进行渲染，渲染之后呈现给用户，浏览器是一个边解析边渲染的过程。</p>\n<p>首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。</p>\n<p>DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repaint。</p>\n<p><strong>页面在首次加载时必然会经历reflow和repaint。</strong></p>\n<p>reflow过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。</p>\n<p>所以我们应该尽可能少的减少 reflow (重新布局) 。  例如: transform 变换, 只会触发重绘, 不会触发重排 (效率非常高)</p>\n<p>...</p>\n<p>页面首次渲染, 必然会进行一次 reflow 和 一次 repaint</p>\n<ol>\n<li>reflow: 重排 (布局相关的)</li>\n<li>repaint: 重绘(绘制, 颜色, 字体, .... 跟结构无关的)</li>\n</ol>\n<p><strong>完整的一次 http 请求流程才算结束</strong></p>\n<hr>\n<h1 id=\"dom\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dom\" aria-hidden=\"true\">#</a> DOM</h1>\n<h2 id=\"dom的事件模型是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dom的事件模型是什么\" aria-hidden=\"true\">#</a> DOM的事件模型是什么？</h2>\n<p>DOM的事件模型(注册事件的方式)分为：</p>\n<ul>\n<li>脚本模型</li>\n<li>内联模型（同类一个，后者覆盖前者）</li>\n<li>动态绑定（同类可多个）</li>\n</ul>\n<p><strong>脚本模型</strong></p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 脚本模型：⾏内绑定 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token literal-property property\">javascrpt</span><span class=\"token operator\">:</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Hello1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><p><strong>内联模型</strong></p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 内联模型：同⼀个元素的同类事件只能添加⼀个，如果添加多个则后添加的会覆盖之前添加的 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Hello2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div><p><strong>动态绑定</strong></p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 动态绑定 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 1. 这种方式只能给同一个元素添加一个事件 */</span>\n  btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/* 2. 这种方式可以给同⼀个元素添加多个同类事件 */</span>\n  btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div></div><h2 id=\"dom的事件流是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dom的事件流是什么\" aria-hidden=\"true\">#</a> DOM的事件流是什么？</h2>\n<p><strong>事件</strong></p>\n<p>事件是HTML⽂档或浏览器窗⼝中发⽣的⼀些特定的交互瞬间。</p>\n<p><strong>事件流</strong></p>\n<p>⼜称为事件传播，是⻚⾯中接收事件的顺序。DOM2级事件规定的事件流包括了3个阶段：</p>\n<ul>\n<li>事件捕获阶段（capture phase）</li>\n<li>处于⽬标阶段（target phase）</li>\n<li>事件冒泡阶段（bubbling phase）</li>\n</ul>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210219222213633\" originSrc=\"/images/image-20210219222213633.png\" data=\"aurora\"></p>\n<p>如上图所示，事件流的触发顺序是：</p>\n<ol>\n<li>事件捕获阶段，为截获事件提供了机会</li>\n<li>实际的⽬标元素接收到事件</li>\n<li>事件冒泡阶段，可在这个阶段对事件做出响应</li>\n</ol>\n<p><strong>事件冒泡（Event Bubbling）</strong></p>\n<p>事件开始由最具体的元素（⽂档中嵌套层次最深的那个节点）接收到后，开始逐级向上传播到较为不具体的节点。</p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span> \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span> \n  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>如果点击了上面页面代码中的 <code>&lt;button&gt;</code> 按钮，那么该 <code>click</code> 点击事件会沿着 DOM 树向上逐级传播，在途经的每个节点上都会发生，具体顺序如下：</p>\n<ol>\n<li>button 元素</li>\n<li>body 元素</li>\n<li>html 元素</li>\n<li>document 对象</li>\n</ol>\n<p><strong>事件捕获（Event Capturing）</strong></p>\n<p>事件开始由较为不具体的节点接收后，然后开始逐级向下传播到最具体的元素上。</p>\n<p>事件捕获的最大作用在于：事件在到达预定⽬标之前就可以捕获到它。</p>\n<p>如果仍以上面那段 HTML 代码为例，当点击按钮后，在事件捕获的过程中，document 对象会首先接收到这个 <code>click</code> 事件，然后再沿着 DOM 树依次向下，直到 <code>&lt;button&gt;</code>。具体顺序如下：</p>\n<ol>\n<li>document 对象</li>\n<li>html 元素</li>\n<li>body 元素</li>\n<li>button 元素</li>\n</ol>\n<h2 id=\"说说什么是事件委托\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#说说什么是事件委托\" aria-hidden=\"true\">#</a> 说说什么是事件委托？</h2>\n<p>事件委托，就是利用了事件冒泡的机制，在较上层位置的元素上添加一个事件监听函数，来管理该元素及其所有子孙元素上的某一类的所有事件。</p>\n<p><strong>示例</strong></p>\n<div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>111<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>222<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>333<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">// ⽗元素 </span>\n    <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 为⽗元素绑定事件，委托管理它的所有⼦元素的点击事件 </span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currentTarget <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTarget<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>currentTarget<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div></div><blockquote>\n<p>适用场景：在绑定大量事件的时候，可以选择事件委托</p>\n</blockquote>\n<p><strong>优点</strong></p>\n<ul>\n<li>事件委托可以减少事件注册数量，节省内存占⽤!</li>\n<li>当新增⼦元素时，⽆需再次做事件绑定，因此非常适合动态添加元素</li>\n</ul>\n<hr>\n<h1 id=\"浏览器与新技术\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#浏览器与新技术\" aria-hidden=\"true\">#</a> 浏览器与新技术</h1>\n<h2 id=\"常见的浏览器内核有哪些\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常见的浏览器内核有哪些\" aria-hidden=\"true\">#</a> 常见的浏览器内核有哪些？</h2>\n<p>浏览器的内核，通常指的是渲染引擎，但现在JS引擎也成为浏览器的重要部分，所以下表展示了当前一些比较流行的常规浏览器、无头浏览器、以及JS运行时所含的渲染引擎和JS引擎：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">浏览器/运行时</th>\n<th style=\"text-align:center\">内核（即渲染引擎）</th>\n<th style=\"text-align:center\">JS引擎</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Chrome</td>\n<td style=\"text-align:center\">Webkit (Chrome 27) / Blink (Chrome 28+)</td>\n<td style=\"text-align:center\">V8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FireFox</td>\n<td style=\"text-align:center\">Gecko</td>\n<td style=\"text-align:center\">SpiderMonkey</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Safari</td>\n<td style=\"text-align:center\">Webkit</td>\n<td style=\"text-align:center\">JavaScriptCore</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Edge</td>\n<td style=\"text-align:center\">EdgeHTML</td>\n<td style=\"text-align:center\">Chakra (for JavaScript)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IE</td>\n<td style=\"text-align:center\">Trident</td>\n<td style=\"text-align:center\">Chakra (for JScript)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PhantomJS (无头浏览器)</td>\n<td style=\"text-align:center\">Webkit</td>\n<td style=\"text-align:center\">JavaScriptCore</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Puppeteer (无头浏览器)</td>\n<td style=\"text-align:center\">Webkit (Chrome 27) / Blink (Chrome 28+)</td>\n<td style=\"text-align:center\">V8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Node.js</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">V8</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"浏览器是如何进行界面渲染的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#浏览器是如何进行界面渲染的\" aria-hidden=\"true\">#</a> 浏览器是如何进行界面渲染的？</h2>\n<p>不同的渲染引擎的具体做法稍有差异，但是大体流程都是差不多的，下面以 webkit 的渲染流程来说明：</p>\n<img src=\"/images/image-20210220214851409.png\" alt=\"image-20210220214851409\" style=\"zoom:45%;\" />\n<p>上图展示的流程是：</p>\n<ol>\n<li>\n<p>获取 HTML ⽂件并进⾏解析，生成一棵 DOM 树（DOM Tree）</p>\n</li>\n<li>\n<p>解析 HTML 的同时也会解析 CSS，⽣成样式规则（Style Rules）</p>\n</li>\n<li>\n<p>根据 DOM 树和样式规则，生成一棵渲染树（Render Tree）</p>\n</li>\n<li>\n<p>进行布局（Layout），即为每个节点分配⼀个在屏幕上应显示的确切坐标位置</p>\n</li>\n<li>\n<p>进⾏绘制（Paint），遍历渲染树节点，调⽤ GPU 将元素呈现出来</p>\n</li>\n</ol>\n<h2 id=\"浏览器是如何解析css选择器的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#浏览器是如何解析css选择器的\" aria-hidden=\"true\">#</a> 浏览器是如何解析CSS选择器的？</h2>\n<p>在生成渲染树的过程中，渲染引擎会根据选择器提供的信息来遍历 DOM 树，找到对应的 DOM 节点后将样式规则附加到上面。</p>\n<p>来看一段样式选择器代码、以及一段要应用样式的 HTML：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">.mod-nav h3 span</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><div class=\"language-html ext-html line-numbers-mode\"><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mod-nav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>项目一<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>项目一<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>项目一<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div></div><p>渲染引擎是怎么根据以上样式选择器去遍历这个 DOM 树的呢？是按照从左往右的选择器顺序去匹配，还是从右往左呢？</p>\n<p>为了更直观的观查，我们先将这棵 DOM 树先绘制成图：</p>\n<img src=\"/images/image-20210220222103787.png\" alt=\"image-20210220222103787\" style=\"zoom:30%;\" />\n<p>然后我们来对比一下两种顺序的匹配：</p>\n<p><strong>从左往右：<code>.mod-nav &gt; h3 &gt; span</code></strong></p>\n<ol>\n<li>从 <code>.mod-nav</code> 开始遍历⼦节点 <code>header</code>、<code>div</code></li>\n<li>然后向各⾃的⼦节点遍历</li>\n<li>在右侧 <code>div</code> 的分⽀中，当遍历到叶节点 <code>a</code> 后，发现不符合规则。则重新回溯到 <code>ul</code> 节点，再遍历下⼀个 <code>li</code> - <code>a</code></li>\n</ol>\n<p><strong>从右往左：<code>span &gt; h3 &gt; .mod-nav</code></strong></p>\n<ol>\n<li>\n<p>先找到所有的 <code>span</code> 节点 ，然后基于每⼀个 <code>span</code> 再向上查找 <code>h3</code></p>\n</li>\n<li>\n<p>由 <code>h3</code> 再向上查找 <code>.mod-nav</code> 的节点</p>\n</li>\n<li>\n<p>最后触及根元素 <code>html</code> 结束该分⽀遍历</p>\n</li>\n</ol>\n<p>可以看到，从右向左的匹配规则可以在第⼀步时就筛选掉⼤量不符合条件的叶节点；⽽从左向右的匹配规则需要消耗大量时间在失败的查找上，这在真实页面中⼀棵 DOM 树的节点成百上千的情况下，这种遍历方式的效率会非常的低，根本不适合采用。</p>\n<p>因此，浏览器遵循 “从右往左” 的规则来解析 CSS 选择器！</p>\n<h2 id=\"dom树是如何构建的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dom树是如何构建的\" aria-hidden=\"true\">#</a> DOM树是如何构建的？</h2>\n<p>构建的过程如下：</p>\n<ol>\n<li>\n<p>浏览器将接收到的⼆进制数据，按指定编码格式转换为 HTML 字符串</p>\n</li>\n<li>\n<p>开始解析，将 HTML 字符串解析成 Tokens</p>\n</li>\n<li>\n<p>构建节点，对节点添加特定的属性，并通过指针确定节点的⽗、⼦、兄弟关系、以及所属 treeScope</p>\n</li>\n<li>\n<p>通过已确定的节点⽗、⼦、兄弟关系，构建出 DOM 树</p>\n</li>\n</ol>\n<p>下图为以上描述过程的图示：</p>\n<img src=\"/images/image-20210220230003937.png\" alt=\"image-20210220230003937\" style=\"zoom:50%;\" />\n<h2 id=\"浏览器重绘与重排的区别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#浏览器重绘与重排的区别是什么\" aria-hidden=\"true\">#</a> 浏览器重绘与重排的区别是什么？</h2>\n<p><strong>重排</strong></p>\n<p>重排是指部分或整个渲染树需要重新分析，并且节点的尺⼨需要重新计算。</p>\n<p>表现为重新⽣成布局，重新排列元素。</p>\n<p><strong>重绘</strong></p>\n<p>重绘是由于节点的⼏何属性发⽣改变，或由于样式发⽣改变（例如：改变元素背景⾊）。</p>\n<p>表现为某些元素的外观被改变。</p>\n<p><strong>两者的关系</strong></p>\n<blockquote>\n<p>重绘不⼀定会出现重排，重排必定会出现重绘。</p>\n</blockquote>\n<p>只改变元素的外观不会引发⽹⻚重排；但若浏览器进行重排后，将会重绘受此次重排影响的部分。</p>\n<p>重排和重绘的代价都很⾼昂，破坏⽤户体验、让界面显示变迟缓。</p>\n<p>但相⽐之下，重排的性能影响会更⼤，在⽆法避免的情况下，⼀般宁可选择代价较⼩的重绘。</p>\n<h2 id=\"如何触发重排和重绘\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何触发重排和重绘\" aria-hidden=\"true\">#</a> 如何触发重排和重绘？</h2>\n<p>改变任意的⽤于构建渲染树的信息，都会引发⼀次重排或重绘。比如：</p>\n<ul>\n<li>\n<p>添加、删除、更新 DOM 节点</p>\n</li>\n<li>\n<p>通过 <code>display: none</code> 隐藏 DOM 节点（同时会触发重排和重绘）</p>\n</li>\n<li>\n<p>通过 <code>visibility: hidden</code> 隐藏 DOM节点（只会触发重绘，因为没有⼏何变化 ）</p>\n</li>\n<li>\n<p>移动 DOM 节点，或是给⻚⾯中的 DOM 节点添加动画</p>\n</li>\n<li>\n<p>添加⼀个样式表，调整样式属性</p>\n</li>\n<li>\n<p>⽤户⾏为，例如：调整浏览器窗⼝的⼤⼩，改变字号，或者滚动页面</p>\n</li>\n</ul>\n<h2 id=\"如何避免重排或重绘\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何避免重排或重绘\" aria-hidden=\"true\">#</a> 如何避免重排或重绘？</h2>\n<p>主要有三大方式来避免：</p>\n<ul>\n<li>集中修改样式</li>\n<li>使用文档碎片（DocumentFragment）</li>\n<li>将元素提升为合成层</li>\n</ul>\n<p><strong>集中修改样式</strong></p>\n<p>通常以改 class 的⽅式，实现样式的集中修改。</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code>el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'className'</span><span class=\"token punctuation\">,</span> isDark <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p><strong>使用文档碎片</strong></p>\n<p>通过 <code>document.createDocumentFragment</code> 可创建⼀个游离于 DOM 树外的节点，在该节点上做批量操作后再将它插⼊ DOM 树中，只会引发⼀次重排。</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 创建碎片节点</span>\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 多次操作碎片节点</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span>\n  node<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\n  fragment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 一次性添加到 DOM 树中</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p><strong>将元素提升为合成层</strong></p>\n<p>将元素提升为合成层的最好⽅式是使⽤ CSS 的 <code>will-change</code> 属性：</p>\n<div class=\"language-css ext-css line-numbers-mode\"><pre v-pre class=\"language-css\"><code><span class=\"token selector\">#target</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p>提升为合成层有下列几个优点：</p>\n<ul>\n<li>\n<p>合成层的位图会由 GPU 合成，⽐由 CPU 处理更快</p>\n</li>\n<li>\n<p>当需要重绘时只重绘本身，不影响其他层</p>\n</li>\n<li>\n<p><code>transform</code> 和 <code>opacity</code> 不会触发重排和重绘</p>\n</li>\n</ul>\n<h2 id=\"前端如何实现即时通讯\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#前端如何实现即时通讯\" aria-hidden=\"true\">#</a> 前端如何实现即时通讯？</h2>\n<p>基于Web的前端，存在以下几种可实现即时通讯的方式：</p>\n<ul>\n<li>短轮询</li>\n<li>Comet</li>\n<li>SSE</li>\n<li>WebSocket</li>\n</ul>\n<p><strong>短轮询</strong></p>\n<p>短轮询就是客户端定时发送请求，获取服务器上的最新数据。不是真正的即时通讯，但一定程度上可以模拟即时通讯的效果。</p>\n<p>优缺点：</p>\n<ul>\n<li>优点：浏览器兼容性好，实现简单</li>\n<li>缺点：实时性不高，资源消耗高，存在较多无用请求，影响性能</li>\n</ul>\n<p><strong>Comet</strong></p>\n<p>有两种实现 Comet 的方式：</p>\n<ol>\n<li>使用 Ajax 长轮询（long-polling）</li>\n<li>使用 HTTP 长连接（基于 iframe 和 htmlfile 的流）</li>\n</ol>\n<p>优缺点：</p>\n<ul>\n<li>\n<p>优点：浏览器兼容性好，即时性好，不存在⽆⽤请求</p>\n</li>\n<li>\n<p>缺点：服务器压力较大（维护⻓连接会消耗较多服务器资源）</p>\n</li>\n</ul>\n<p><a href=\"http://www.52im.net/thread-334-1-1.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：Comet技术详解<ExternalLinkIcon/></a></p>\n<p><strong>SSE</strong></p>\n<p>服务端推送事件（Server-Sent Event），它是⼀种允许服务端向客户端推送新数据的 HTML5 技术。</p>\n<p>优缺点：</p>\n<ul>\n<li>\n<p>优点：基于 HTTP，无需太多改造就能使⽤；相比 WebSocket 要简单方便很多</p>\n</li>\n<li>\n<p>缺点：基于⽂本传输，效率没有 WebSocket ⾼；不是严格的双向通信，客户端⽆法复⽤连接来向服务端发送请求，</p>\n<p>而是每次都需重新创建新请求</p>\n</li>\n</ul>\n<p><a href=\"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：SSE教程<ExternalLinkIcon/></a></p>\n<p><strong>WebSocket</strong></p>\n<p>这是基于 TCP 协议的全新、独⽴的协议，作⽤是在服务器和客户端之间建⽴实时的双向通信。</p>\n<p>WebSocket 协议与 HTTP 协议保持兼容，但它不会融⼊ HTTP 协议，仅作为 HTML 5 的⼀部分。</p>\n<p>优缺点：</p>\n<ul>\n<li>\n<p>优点：真正意义上的双向实时通信，性能好、延迟低</p>\n</li>\n<li>\n<p>缺点：由于是独⽴于 HTTP 的协议，因此要使用的话需要对项⽬作改造；使⽤复杂度较⾼，通常需要引⼊成熟的库；并且⽆法兼容低版本的浏览器</p>\n</li>\n</ul>\n<p>HTTP 和 WebSocket 的连接通信比较图：</p>\n<img src=\"/images/image-20210221101152845.png\" alt=\"image-20210221101152845\" style=\"zoom:30%;\" />\n<h2 id=\"什么是浏览器的同源策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是浏览器的同源策略\" aria-hidden=\"true\">#</a> 什么是浏览器的同源策略？</h2>\n<p>首先，同源是指资源地址的 &quot;协议 + 域名 + 端⼝&quot; 三者都相同，即使两个不同域名指向了同⼀ IP 地址，也被判断为⾮同源。</p>\n<p>下面是一些地址的同源判断示例：</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210221103114013\" originSrc=\"/images/image-20210221103114013.png\" data=\"aurora\"></p>\n<p>了解了什么是同源，再来说同源策略。</p>\n<blockquote>\n<p>同源策略是一种⽤于隔离潜在恶意⽂件的重要安全保护机制，它用于限制从⼀个源加载的⽂档或脚本与来⾃另⼀个源的资源进⾏交互。</p>\n</blockquote>\n<p>在浏览器中，⼤部分内容都受同源策略限制，除了以下三个标签：</p>\n<ul>\n<li><code>&lt;img&gt;</code></li>\n<li><code>&lt;link&gt;</code></li>\n<li><code>script</code></li>\n</ul>\n<h2 id=\"如何实现跨域\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何实现跨域\" aria-hidden=\"true\">#</a> 如何实现跨域？</h2>\n<p>历史上出现过的跨域⼿段有很多，本章主要介绍目前主流的3种跨域⽅案：</p>\n<ul>\n<li>JSONP</li>\n<li>CORS</li>\n<li>服务器代理(webpack代理, Nginx反向代理)</li>\n</ul>\n<p><strong>JSONP</strong></p>\n<p>这是一种非常经典的跨域方案，它利用了<code>&lt;script&gt;</code> 标签不受同源策略的限制的特性，实现跨域效果。</p>\n<p>优点：</p>\n<ul>\n<li>实现简单</li>\n<li>兼容性好</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>只支持 GET 请求 （因为 <code>&lt;script&gt;</code> 标签只能发送 GET 请求）</li>\n<li>存在被 XSS 攻击的可能，缺乏安全性保证</li>\n<li>需要服务端配合改造</li>\n</ul>\n<p>实现示例：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 1. JSONP 发送请求的函数封装</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">JSONP</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> callbackKey<span class=\"token punctuation\">,</span> callback <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在参数中指定 callback 名字 </span>\n  params <span class=\"token operator\">=</span> params <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> params<span class=\"token punctuation\">[</span>callbackKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jsonpCallback'</span>\n  \n  <span class=\"token comment\">// 预留 callback </span>\n  window<span class=\"token punctuation\">.</span>jsonpCallback <span class=\"token operator\">=</span> callback \n  \n  <span class=\"token comment\">// 拼接参数字符串</span>\n  <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 创建 script 标签</span>\n  <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span> \n  script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>queryString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> \n  \n  <span class=\"token comment\">// 插⼊ DOM 树</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. 调用示例</span>\n<span class=\"token constant\">JSONP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://s.weibo.com/ajax/jsonp/suggestion'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'test'</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">callbackKey</span><span class=\"token operator\">:</span> <span class=\"token string\">'_cb'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div></div><p><strong>CORS</strong></p>\n<p>跨域资源共享（CORS），这是⽬前比较主流的跨域解决⽅案，它利用一些额外的 HTTP 响应头来通知浏览器允许访问来自指定 origin 的非同源服务器上的资源。</p>\n<p>当在⼀个资源中去请求与本资源所在的服务器有不同协议、域、或端⼝的另一个资源时，就会发起⼀个跨域 HTTP 请求。</p>\n<p>如果你⽤的是 Node.js 的 Express 框架，则可以这样来进行设置：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 创建一个 CORS 中间件 </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">allowCrossDomain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://example.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GET,PUT,POST,DELETE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token comment\">// 为 Express 配置 CORS 中间件</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>allowCrossDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div></div><p>在实际项目中，建议使用一些已经比较成熟的开源中间件。</p>\n<p><strong>Nginx反向代理</strong></p>\n<p>这是目前最方便，最推荐使用的跨域解决方案。Nginx 本身是⼀款极其强⼤的 Web 服务器，轻量级、启动快、⾼并发。</p>\n<p>现在的后端服务程序，通常会使用 Nginx 进行反向代理：</p>\n<img src=\"/images/image-20210221111025585.png\" alt=\"image-20210221111025585\" style=\"zoom:33%;\" />\n<p>反向代理的原理其实很简单：</p>\n<blockquote>\n<p>Nginx 作为代理服务器，所有客户端的请求都必须先经过 Nginx 的处理，然后再将请求转发给其他后端程序（比如 Node.js 或Java 程序），这样就规避同源策略的影响</p>\n</blockquote>\n<p>下面是一个配置 Nginx 反向代理的示例配置文件：</p>\n<div class=\"language-nginx ext-nginx line-numbers-mode\"><pre v-pre class=\"language-nginx\"><code><span class=\"token comment\"># 进程, 可更具 cpu 数量调整</span>\n<span class=\"token directive\"><span class=\"token keyword\">worker_processes</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span> \n\n<span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\"># 连接数 </span>\n  <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span> <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token directive\"><span class=\"token keyword\">include</span> mime.types</span><span class=\"token punctuation\">;</span> \n  <span class=\"token directive\"><span class=\"token keyword\">default_type</span> application/octet-stream</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token directive\"><span class=\"token keyword\">sendfile</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">#连接超时时间，服务器会在这个时间过后关闭连接。 </span>\n  <span class=\"token directive\"><span class=\"token keyword\">keepalive_timeout</span> <span class=\"token number\">10</span></span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\"># 开启 Gzip 压缩</span>\n  <span class=\"token directive\"><span class=\"token keyword\">gzip</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\"># 直接请求nginx也是会报跨域错误的这⾥设置允许跨域 </span>\n  <span class=\"token comment\"># 如果代理地址已经允许跨域则不需要这些, 否则报错(虽然这样nginx跨域就没意义了) </span>\n  <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Origin *</span><span class=\"token punctuation\">;</span> \n  <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Headers X-Requested-With</span><span class=\"token punctuation\">;</span> \n  <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Methods GET,POST,OPTIONS</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\"># srever模块配置是http模块中的⼀个⼦模块，⽤来定义⼀个虚拟访问主机</span>\n  <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span> \n    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> localhost</span><span class=\"token punctuation\">;</span> \n    \n    <span class=\"token comment\"># 根路径指到index.html </span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token directive\"><span class=\"token keyword\">root</span> html</span><span class=\"token punctuation\">;</span> \n      <span class=\"token directive\"><span class=\"token keyword\">index</span> index.html index.htm</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\"># 请求转发：</span>\n    <span class=\"token comment\"># 例如 http://localhost/api 的请求会被转发到 http://192.168.0.103:8080</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /api</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span></span><span class=\"token punctuation\">;</span> \n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Real-IP <span class=\"token variable\">$remote_addr</span></span><span class=\"token punctuation\">;</span> \n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span></span><span class=\"token punctuation\">;</span> \n      <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://192.168.0.103:8080</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\"># 重定向错误⻚⾯到/50x.html </span>\n    <span class=\"token directive\"><span class=\"token keyword\">error_page</span> <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span> /50x.html</span><span class=\"token punctuation\">;</span> \n    \n    <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token directive\"><span class=\"token keyword\">root</span> html</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br></div></div><p><a href=\"https://juejin.cn/post/6844903767226351623#heading-19\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：跨域方式实现原理<ExternalLinkIcon/></a></p>\n<h1 id=\"前端工程化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#前端工程化\" aria-hidden=\"true\">#</a> 前端工程化</h1>\n<h2 id=\"babel的原理是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#babel的原理是什么\" aria-hidden=\"true\">#</a> Babel的原理是什么？</h2>\n<p>Babel 的主要工作是对代码进行转译。</p>\n<p>转译分为三阶段：</p>\n<ul>\n<li>\n<p>解析（Parse），将代码解析⽣成抽象语法树 AST，也就是词法分析与语法分析的过程</p>\n</li>\n<li>\n<p>转换（Transform），对 AST 进⾏变换方面的⼀系列操作。通过 babel-traverse，对 AST 进⾏遍历并作添加、更新、删除等操作</p>\n</li>\n<li>\n<p>⽣成（Generate），通过 babel-generator 将变换后的 AST 转换为 JS 代码</p>\n</li>\n</ul>\n<p>转译流程示意图：</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210221114506275\" originSrc=\"/images/image-20210221114506275.png\" data=\"aurora\"></p>\n<h2 id=\"如何编写一个babel插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何编写一个babel插件\" aria-hidden=\"true\">#</a> 如何编写一个Babel插件？</h2>\n<p>Babel 插件的主要工作阶段是在 Babel 将代码解析成 AST 之后，插件们对 AST 进行各种操作后，再由 Babel 输出最终的代码。</p>\n<p>要编写一个 Babel 插件模块，则需要为模块代码导出一个函数，且该函数返回一个对象，对象内应包含有 <code>visitor</code> 属性：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">visitor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p><code>visitor</code> 是针对各类 AST 节点作处理的地⽅。我们可以通过 <code>console.log</code> 打印或 <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener noreferrer\">AST Explorer 工具<ExternalLinkIcon/></a> 来查看 Babel 具体生成的 AST 节点。</p>\n<p><strong>示例</strong></p>\n<p>我们来编写一个插件，其功能是能自动将源码中的数字字面量数学运算进行预计算处理，简化代码。例如：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 原来的代码</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">// 处理后的代码</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token number\">3</span>    <span class=\"token comment\">// 这样优化以后，在实际运行时可以减少一次加法操作</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p>我们可以先通过 AST Explorer 来获取 JSON 格式的 AST 结构：</p>\n<div class=\"language-json ext-json line-numbers-mode\"><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VariableDeclaration\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"declarations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VariableDeclarator\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"result\"</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"init\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"BinaryExpression\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Literal\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"raw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Literal\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"raw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"const\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br></div></div><p>从以上 AST 结构可以知道，<code>1 + 2</code> 是一个 <code>BinaryExpression</code> 类型的节点，那么在我们编写的插件代码中的 <code>visitor</code> 里就可以这样进行处理：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> babel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-types'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">var</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">BinaryExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 判断表达式两边，是否都是数字 </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isNumericLiteral</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">isNumericLiteral</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token comment\">// 根据不同的操作符作运算 </span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>operator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span> \n          result <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span> \n          result <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span> \n          result <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span> \n          result <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">/</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"**\"</span><span class=\"token operator\">:</span> \n          <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            result <span class=\"token operator\">=</span> result <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n            result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> \n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> \n      <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 如果上⾯的运算有结果的话 </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token comment\">// 把表达式节点替换成number字⾯量 </span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">numericLiteral</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> visitor <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>      \n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br></div></div><p>这个插件的基本功能就完成了，来运行试试：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> babel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-core\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"const result = 1 + 2;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> \n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 结果：const result = 3;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>转换结果符合预期。</p>\n<p>不过这个插件还不能完全正确的工作，在转换如 <code>const result = 1 + 2 + 3 + 4 + 5;</code> 这样的代码时，结果为 <code>const result = 3 + 3 + 4 + 5;</code>，也就是只转换了代码中的第一段表达式计算。</p>\n<p>如果用 AST Explorer 查看 AST 结构的话，会发现原来这个运算由层层嵌套的 <code>BinaryExpression</code> 组成：</p>\n<blockquote>\n<p>BinaryExpression(  BinaryExpression( BinaryExpression( BinaryExpression(1 + 2) + 3 ) + 4 ) + 5 )</p>\n</blockquote>\n<p>因此我们得改造一下之前的代码逻辑，进行遍历操作：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 如果上⾯的运算有结果的话 </span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// 把表达式节点替换成number字⾯量 </span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">numericLiteral</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  \n  <span class=\"token comment\">// 向上遍历⽗级节点</span>\n  <span class=\"token keyword\">let</span> parentPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">;</span> \n  parentPath <span class=\"token operator\">&amp;&amp;</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">BinaryExpression</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> parentPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>这样就能正确工作了。</p>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#builders\" target=\"_blank\" rel=\"noopener noreferrer\">参考文档：Babel插件手册<ExternalLinkIcon/></a></p>\n<h2 id=\"你们的git工作流是什么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#你们的git工作流是什么样的\" aria-hidden=\"true\">#</a> 你们的Git工作流是什么样的？</h2>\n<p>每个公司采用的 Git 工作流都可能会有差别，有的比较规范，有的比较随意。在这里介绍一个名为 GitFlow 的 git 标准操作流程。</p>\n<p>在 GitFlow 标准下，我们的 git 仓库需要包含以下几个关键分支：</p>\n<ul>\n<li>master：主分支</li>\n<li>develop：主开发分⽀。包含确定即将发布的代码</li>\n<li>feature：新功能分⽀。⼀个新功能对应⼀个分⽀</li>\n<li>release：发布分⽀。发布时⽤的分⽀，⼀般测试阶段发现的 bug 在这个分⽀进⾏修复</li>\n<li>hotfix：热补丁分支。用于修改在线上版本中发现的严重紧急 bug</li>\n</ul>\n<p><strong>GitFlow 的主要优点</strong></p>\n<ol>\n<li>支持并⾏开发</li>\n</ol>\n<p>因为每个新功能都会建⽴⼀个新的 feature 分⽀，从⽽和其他已经完成的功能隔离开，且当只有在新功能完成开发的情况下，其对应的 feature 分⽀才会被合并到主开发分⽀（develop 分支）。</p>\n<p>另外，如果你正在开发某个功能的同时⼜有⼀个新功能需要开始开发，那么你只需把当前 feature 的代码提交后，新建另外⼀个 feature 分⽀即可开发新功能了。</p>\n<p>你也可以随时切回之前的其他 feature 分⽀继续完成该功能的开发。</p>\n<ul>\n<li>协作开发</li>\n</ul>\n<p>因为每个 feature 分⽀上改动的代码都只对该 feature 对应的功能生效，所以不同 feature 分支上的代码在开发时不会互相影响，大家可以相安无事的开发自己负责的功能。</p>\n<p>同时我们可以根据分支的名称，很容易知道每个⼈都在做什么功能。</p>\n<ul>\n<li>发布阶段</li>\n</ul>\n<p>当⼀个新 feature 开发完成时，它会被合并到 develop 分⽀，这就意味着 develop 分支上包含了所有已经开发完成的功能。</p>\n<p>因此，在开发新的 feature 时，我们只需从 develop 分⽀来创建新的分⽀，即可在新的 feature 分支中包含所有已完成的最新功能。</p>\n<ul>\n<li>⽀持紧急修复</li>\n</ul>\n<p>hotfix 分⽀是从某个已经发布的 Tag 上创建出来来，用于紧急修复 Bug。</p>\n<p>该紧急修复只影响这个已经发布的 Tag，⽽不会影响你正在开发的其他新 feature 。</p>\n<p><strong>注意点</strong></p>\n<ol>\n<li>\n<p>feature 分⽀都是从 develop 分⽀上创建的，开发完成后再合并到 develop 分⽀上，等待发布</p>\n</li>\n<li>\n<p>当需要发布时，我们要从 develop 分⽀上创建⼀个 release 分⽀，然后该 release 分⽀会发布到测试环境进⾏测试。如果发现问题的话，就会直接在该分⽀上进⾏修复。所有问题修复之前，会不停重复 <code>发布</code> &gt; <code>测试</code> &gt; <code>修复</code> &gt; <code>重新发布</code>  &gt; <code>重新测试</code> 流程。 发布结束，该 release 分⽀会被合并到 develop 以及 master 分⽀，从⽽保证不会有代码丢失</p>\n</li>\n<li>\n<p>master 分⽀只跟踪已经发布的代码，合并到 master 上的 commit 只能来⾃ release 分⽀和 hotfix 分⽀</p>\n</li>\n<li>\n<p>hotfix 分⽀的作⽤是紧急修复⼀些 Bug，它们都是从 master 分⽀上的某个 Tag 建⽴，修复结束后再会被合并到 develop 和 master 分⽀上</p>\n</li>\n</ol>\n<p><a href=\"https://www.ruanyifeng.com/blog/2015/12/git-workflow.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章：Git工作流<ExternalLinkIcon/></a></p>\n<h2 id=\"git的rebase和merge的区别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#git的rebase和merge的区别是什么\" aria-hidden=\"true\">#</a> Git的rebase和merge的区别是什么？</h2>\n<p><code>git rebase</code> 和 <code>git merge</code> 两个命令都⽤于从⼀个分⽀获取内容并合并到当前分⽀。</p>\n<p>以一个 <code>feature/todo</code> 分⽀合并到 <code>master</code>主分⽀为例，我们来看一下分别⽤ <code>rebase</code> 和 <code>merge</code> 会有什么不同。</p>\n<p><strong>使用 Merge</strong></p>\n<img src=\"/images/image-20210222132936016.png\" alt=\"image-20210222132936016\" style=\"zoom:30%;\" />\n<p><code>merge</code> 会⾃动创建⼀个新的 <code>commit</code>， 如果合并时遇到冲突的话，只需要修改后重新 <code>commit</code>。</p>\n<ul>\n<li>\n<p>优点：能记录真实的 <code>commit</code> 情况，包括每个分⽀的详情</p>\n</li>\n<li>\n<p>缺点：由于每次 <code>merge</code> 会⾃动产⽣⼀个 <code>merge commit</code>，因此在使⽤⼀些可视化的 git 工具时会看到这些自动产生的 <code>commit</code>，这些 <code>commit</code> 对于程序员来说没有什么特别的意义，反而会影响阅读</p>\n</li>\n</ul>\n<p><strong>使用 Rebase</strong></p>\n<img src=\"/images/image-20210222133524146.png\" alt=\"image-20210222133524146\" style=\"zoom:30%;\" />\n<p><code>rebase</code> 会合并之前的 <code>commit</code> 历史。</p>\n<ul>\n<li>\n<p>优点：可以得到更简洁的提交历史，去掉了 <code>merge commit</code></p>\n</li>\n<li>\n<p>缺点：因为合并而产生的代码问题，就不容易定位，因为会重写提交历史信息</p>\n</li>\n</ul>\n<p><strong>建议</strong></p>\n<ul>\n<li>\n<p>当需要保留详细的合并信息时，建议使⽤ <code>git merge</code>，特别是需要将分⽀合并进 <code>master</code> 分⽀时</p>\n</li>\n<li>\n<p>当发现⾃⼰修改某个功能时提交比较频繁，并觉得过多的提交信息对自己来说没有必要，那么可尝试使用 <code>git rebase</code></p>\n</li>\n</ul>\n<h1 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\" aria-hidden=\"true\">#</a> Vue</h1>\n<h2 id=\"什么是mvvm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是mvvm\" aria-hidden=\"true\">#</a> 什么是MVVM？</h2>\n<p>Model-View-ViewModel 模式，最早在 2005 年微软推出的基于 Windows 的⽤户界⾯框架 WPF 中提出，而最早采用 MVVM 的前端框架是 2010 年发布的 Knockout。</p>\n<img src=\"/images/image-20210223221853817.png\" alt=\"image-20210223221853817\" style=\"zoom:100%;\" />\n<p><strong>Model 层</strong></p>\n<p>对应数据层的域模型，主要用来做域模型的同步。</p>\n<p>通过 <code>Ajax</code>、<code>fetch</code> 等 API 完成客户端和服务端业务模型的同步。</p>\n<p>在分层关系中，它主要⽤于抽象出 ViewModel 层中视图的 Model。</p>\n<p><strong>View 层</strong></p>\n<p>作为视图模板存在，其实在 MVVM 中整个 View 就是⼀个动态模板。</p>\n<p>除了用于定义结构和布局之外，它还展示了 ViewModel 层的数据和状态。</p>\n<p>View 层并不负责状态的实际处理，它只是做：数据绑定声明、 指令声明、 事件绑定声明。</p>\n<p><strong>ViewModel 层</strong></p>\n<p>负责暴露数据给 View 层，并对 View 层中的数据绑定声明、 指令声明、 事件绑定声明进行实际的业务逻辑。</p>\n<p>ViewModel 底层会做好绑定属性的监听，当 ViewModel 中的数据变化时，View 层会自动进行更新；⽽当 View 中声明了数据的双向绑定（表单元素），框架也会监听 View 层（表单元素）值的变化，⼀旦变化，则 View 层绑定的 ViewModel 中的数据也会得到⾃动更新。</p>\n<h2 id=\"mvvm的优缺点有哪些\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mvvm的优缺点有哪些\" aria-hidden=\"true\">#</a> MVVM的优缺点有哪些？</h2>\n<p><strong>优点</strong></p>\n<ol>\n<li>实现了视图（View）和模型（Model）的分离，降低代码耦合、提⾼视图或逻辑的复⽤性</li>\n</ol>\n<blockquote>\n<p>⽐如：View 可以独⽴于 Model 变化和修改，⼀个 ViewModel 可以绑定于不同的 &quot;View&quot;，当 View 发生变化时 Model 一定会随之改变，而当 Model 变化时则 View 可以不变。我们可以把⼀些视图逻辑放在⼀个 ViewModel ⾥，以此让多个 View 重⽤这段视图逻辑。</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>提⾼了可测试性：ViewModel 的存在可以帮助开发者更好地编写测试代码</p>\n</li>\n<li>\n<p>能⾃动更新 DOM：利⽤双向绑定，数据更新后视图⾃动更新，让开发者从繁琐的⼿动操作 DOM 中解放出来</p>\n</li>\n</ol>\n<p><strong>缺点</strong></p>\n<ol>\n<li>\n<p>Bug 很难被调试：因为使⽤了双向绑定的模式，当我们看到界⾯发生异常了，有可能是 View 的代码产生的 Bug，也有可能是Model 代码的问题。数据绑定使得⼀个位置的 Bug 被快速传递到别的位置，要定位原始出问题的地⽅就变得不那么容易了。另外，数据绑定的声明是指令式地写在 View 模版中的，它们没办法打断点进行 Debug</p>\n</li>\n<li>\n<p>在⼀个⼤的模块中 Model 也会很⼤，虽然使⽤上来说⽅便了，也能很容易的保证了数据的⼀致性，但如果⻓期持有不释放内存，就会造成更多的内存消耗</p>\n</li>\n<li>\n<p>对于⼤型的图形应⽤程序，视图状态较多，ViewModel 的构建和维护的成本都会⽐较⾼</p>\n</li>\n</ol>\n<h2 id=\"谈谈对vue生命周期的理解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#谈谈对vue生命周期的理解\" aria-hidden=\"true\">#</a> 谈谈对Vue生命周期的理解？</h2>\n<p><strong>生命周期的概念</strong></p>\n<p>每个 Vue 实例都有⼀个完整的⽣命周期：</p>\n<ol>\n<li>开始创建</li>\n<li>初始化数据</li>\n<li>编译模版</li>\n<li>挂载 DOM</li>\n<li>渲染、更新数据 =&gt; 重新渲染</li>\n<li>卸载</li>\n</ol>\n<p>这⼀系列过程我们称之为 Vue 的⽣命周期。</p>\n<p><strong>各个生命周期的作用</strong></p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>执行时机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate</td>\n<td>在组件实例被创建之初、组件的属性⽣效之前被调用</td>\n</tr>\n<tr>\n<td>created</td>\n<td>在组件实例已创建完毕。此时属性也已绑定，但真实DOM还未⽣成，$el 还不可⽤</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>在组件挂载开始之前被调⽤。相关的 render 函数⾸次被调⽤</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>在 el 被新建的 vm.$el 替换并挂载到实例上之后被调用</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>在组件数据更新之前调⽤。发⽣在虚拟 DOM 打补丁之前</td>\n</tr>\n<tr>\n<td>update</td>\n<td>在组件数据更新之后被调用</td>\n</tr>\n<tr>\n<td>activited</td>\n<td>在组件被激活时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>在组件被销毁时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）</td>\n</tr>\n<tr>\n<td>beforeDestory</td>\n<td>在组件销毁前调⽤</td>\n</tr>\n<tr>\n<td>destoryed</td>\n<td>在组件销毁后调⽤</td>\n</tr>\n</tbody>\n</table>\n<p><strong>生命周期示意图</strong></p>\n<img src=\"/images/image-20210224084130350.png\" alt=\"image-20210224084130350\"  />\n<h2 id=\"在vue中网络请求应该放在哪个生命周期中发起\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在vue中网络请求应该放在哪个生命周期中发起\" aria-hidden=\"true\">#</a> 在Vue中网络请求应该放在哪个生命周期中发起？</h2>\n<p>可以在 <code>mounted</code> 或 <code>created</code> 这两个⽣命周期中调⽤发起网络请求。</p>\n<h2 id=\"vue组件之间如何进行通信\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue组件之间如何进行通信\" aria-hidden=\"true\">#</a> Vue组件之间如何进行通信？</h2>\n<p><strong><code>props</code> 和 <code>$emit + v-on</code></strong></p>\n<p>通过 <code>props</code> 将数据在组件树中进行⾃上⽽下的传递；</p>\n<p>通过 <code>$emit</code> 和 <code>v-on</code> 来作信息的向上传递。</p>\n<p><strong>EventBus</strong></p>\n<p>可通过 EventBus 进⾏信息的发布与订阅。</p>\n<p><strong>Vuex</strong></p>\n<p>全局状态管理库。可通过它来进行全局数据流的管理。</p>\n<p><strong><code>$attrs</code> 和 <code>$listeners</code></strong></p>\n<p>在 Vue 2.4 版本中加⼊的 <code>$attrs</code> 和 <code>$listeners</code> 可以用来作为跨级组件之间的通信机制。</p>\n<p><strong><code>provide</code> 和 <code>inject</code></strong></p>\n<p>由于 <code>provide</code> 和 <code>inject</code> 可以允许⼀个祖先组件向它的所有⼦孙组件注⼊⼀个依赖（不论组件层次有多深），并在其上下游关系成⽴的时间⾥始终⽣效，因此这种机制也就成为了一种跨组件通信的手段。</p>\n<blockquote>\n<p>另外还有一些方式使用场景有限，在此不介绍了。</p>\n<p>可以阅读参考文章：<a href=\"https://juejin.cn/post/6844903887162310669\" target=\"_blank\" rel=\"noopener noreferrer\">Vue中的8种组件通信方式<ExternalLinkIcon/></a></p>\n</blockquote>\n<h2 id=\"computed和watch的区别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#computed和watch的区别是什么\" aria-hidden=\"true\">#</a> computed和watch的区别是什么？</h2>\n<p><strong>computed</strong></p>\n<ol>\n<li>\n<p>它是计算属性。主要用于值的计算并一般会返回一个值。所以它更多⽤于计算值的场景</p>\n</li>\n<li>\n<p>它具有缓存性。当访问它来获取值时，它的 getter 函数所计算出来的值会进行缓存，只有当它依赖的属性值发生了改变，那下⼀次再访问时才会重新调⽤ getter 函数来计算</p>\n</li>\n<li>\n<p>它适⽤于计算⽐较消耗性能的计算场景</p>\n</li>\n</ol>\n<p><strong>watch</strong></p>\n<ol>\n<li>\n<p>它更多的是起到 “观察” 的作⽤，类似于对数据进行变化的监听并执行回调。主要⽤于观察 <code>props</code>、<code>$emit</code> 或本组件的值，当这些值发生变化时，执⾏回调</p>\n</li>\n<li>\n<p>它不具有缓存性。当⻚⾯重新渲染时，即使值没发生变化也会执⾏</p>\n</li>\n</ol>\n<p><strong>建议</strong></p>\n<ol>\n<li>\n<p>当目的是进⾏数值计算，且依赖于其他数据，那么推荐使用 <code>computed</code></p>\n</li>\n<li>\n<p>当需要在某个数据发生变化的同时做⼀些稍复杂的逻辑操作，那么推荐使⽤ <code>watch</code></p>\n</li>\n</ol>\n<h2 id=\"vue双向绑定原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue双向绑定原理\" aria-hidden=\"true\">#</a> Vue双向绑定原理？</h2>\n<p>在 Vue 2.x 中，利⽤的是 <code>Object.defineProperty</code> 去劫持对象的访问器（Getter、Setter），当对象属性值发⽣变化时可获取变化，然后根据变化来作后续响应；</p>\n<p>在 Vue 3.0 中，则是通过 <code>Proxy</code> 代理对象进⾏类似的操作。</p>\n<h2 id=\"object-defineproperty和proxy的优缺点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#object-defineproperty和proxy的优缺点\" aria-hidden=\"true\">#</a> Object.defineProperty和Proxy的优缺点？</h2>\n<p><strong>Proxy</strong></p>\n<ul>\n<li>\n<p>可以直接监听整个对象，⽽⾮是对象的属性</p>\n</li>\n<li>\n<p>可以直接监听数组的变化</p>\n</li>\n<li>\n<p>拦截⽅法丰富：多达13种，不限于 <code>apply</code>、<code>ownKeys</code>、<code>deleteProperty</code>、<code>has</code> 等。比 <code>Object.defineProperty</code> 强大很多</p>\n</li>\n<li>\n<p>返回的是⼀个新对象，可以在不影响原对象的情况下，只操作新对象来达到⽬的；⽽ <code>Object.defineProperty</code> 只能遍历原对象属性并直接修改原对象</p>\n</li>\n<li>\n<p>受到各浏览器⼚商的重点持续性能优化，能享受到作为新标准的性能红利</p>\n</li>\n</ul>\n<p><strong>Object.defineProperty</strong></p>\n<ul>\n<li>兼容性较好（可⽀持到 IE9）</li>\n</ul>\n<h2 id=\"如何理解vue的响应式系统\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何理解vue的响应式系统\" aria-hidden=\"true\">#</a> 如何理解Vue的响应式系统？</h2>\n<p>(考察MVVM)   M: model数据模型,    V:view视图模型,  VM: viewModel视图数据模型</p>\n<p>双向:</p>\n<ol>\n<li>视图变化了, 数据自动更新   =&gt;  监听原生的事件即可,  输入框变了,  监听输入框input事件</li>\n<li>数据变化了, 视图要自动更新  =&gt;  vue2 和 vue3</li>\n</ol>\n<h3 id=\"基本原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本原理\" aria-hidden=\"true\">#</a> 基本原理</h3>\n<p>vue2.0 数据劫持:  Object.defineProperty  (es5)</p>\n<p>vue3.0 数据劫持:  Proxy   (es6)</p>\n<p>分析 :此题考查 Vue的 MVVM 原理</p>\n<p>解答:  Vue的双向绑定原理其实就是 MVVM 的基本原理, Vuejs官网已经说明, 实际就是通过 Object.defineProperty方法 完成了对于Vue实例中数据的 <strong><code>劫持</code></strong>, 通过对于 data中数据 进行set的劫持监听, 然后通过**<code>观察者模式</code>**, 通知 对应的绑定节点 进行节点数据更新, 完成数据驱动视图的更新</p>\n<p>简单概述 : 通过Object.defineProperty 完成对于数据的劫持, 通过观察者模式, 完成对于节点的数据更新</p>\n<h3 id=\"观察者模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#观察者模式\" aria-hidden=\"true\">#</a> 观察者模式</h3>\n<p>观察者模式:  当对象间存在  <strong>一对多</strong>  关系时，则使用观察者模式（Observer Pattern）。</p>\n<p>比如，当一个对象或者数据被修改时，则会自动通知依赖它的对象。</p>\n<p>**意图：**定义对象间的一种 <code>一对多的依赖关系</code>，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>\n<p>拍卖会的时候，大家相互叫价，拍卖师(Dep)会观察最高标价(Object.defineProperty)，</p>\n<p>一旦最高价变化了, 然后通知给其它竞价者(watcher观察者 - 订阅者, 订阅了价格的变化)，这就是一个观察者模式</p>\n<p>下图为Vue框架在数据初始化中使用观察者模式的示意图：</p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20201208122803496\" originSrc=\"images/image-20201208122803496.png\" data=\"aurora\"></p>\n<p>Dep要进行 <strong>依赖收集</strong>，并通过一个subs数组, 记录观察者Watcher,</p>\n<p>Watcher 分为渲染 watcher、计算属性 watcher、侦听器 watcher三种</p>\n<p>收集依赖: 简单点说就是谁借了我的钱，我就把那个人  <strong>记下来</strong>  ，以后我的钱少了 我就通知他们说我没钱了</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> msg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">   // Watcher1(渲染), 依赖于msg\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> car <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">   // Watcher2(渲染),  依赖于car\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> myMsg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">   // Watcher3(渲染), 依赖于myMsg\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">myMsg</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'计算属性重新计算了'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">'20'</span>  <span class=\"token comment\">// Watcher4(计算属性中), 依赖于msg, msg变了重新计算</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">msg</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'新的msg'</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Watcher5(侦听器), 将来msg变化, 这边要执行这个函数</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n\n<span class=\"token comment\">// 收集依赖 (dep结构有点类似于二维数组, (Map结构))   arr.type=\"msgDep\"</span>\n<span class=\"token literal-property property\">dep</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token literal-property property\">msgDep</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Watcher5</span><span class=\"token punctuation\">(</span>侦听器依赖<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Watcher4</span><span class=\"token punctuation\">(</span>计算属性依赖<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Watcher1</span><span class=\"token punctuation\">(</span>渲染<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">carDep</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Watcher2</span><span class=\"token punctuation\">(</span>渲染<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">myMsgDep</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Watcher3</span><span class=\"token punctuation\">(</span>渲染<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// Watcher</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">callback</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>数据变化后<span class=\"token punctuation\">,</span> 需要执行的回调<span class=\"token punctuation\">)</span>\n  <span class=\"token literal-property property\">isRenderWatcher</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>是否是render的watcher<span class=\"token punctuation\">,</span> 是否要触发视图的更新<span class=\"token punctuation\">,</span> 往后放<span class=\"token punctuation\">,</span> 最后统一虚拟dom对比<span class=\"token punctuation\">,</span> 统一更新<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br></div></div><p>比如: 假定数据 money 变了, 那么没有任何与money相关的观察者, 就不需要进行任何更新操作, 也不需要执行任何的监视函数</p>\n<p>然而: 假定数据 msg 变了, 就会通知到相关的Watcher, 且优先通知侦听器Watcher和计算属性Watcher, 后进行统一的渲染更新</p>\n<ol>\n<li>通知侦听器Watcher,  立刻执行配置的函数,  console.log('新的msg', newValue)</li>\n<li>通知计算属性Watcher, 计算属性依赖的值变了, 需要重新计算\n且更新后, myMsg 变化了,  需要进行进行视图的渲染  (render)     (--- 要更新, 等着---)</li>\n<li>通过到watcher1, 渲染Watcher  (---要更新---)</li>\n<li>最后统一进行, 新旧虚拟dom的对比, 完成视图的更新</li>\n</ol>\n<p><strong>当数据状态发生改变时，会被 Object.defineProperty 监听劫持到, 会通知到 Dep,  并根据收集的依赖关系,</strong></p>\n<p><strong>让订阅者Watcher进行数据更新（update）操作 ,  派发更新</strong></p>\n<p>总结概述: vue采用的是观察者模式, 是一种一对多的关系,  一上来vue在解析渲染时, 会进行依赖收集, 会将渲染 watcher、计算属性 watcher、侦听器 watcher, 都收集到dep中,将来Object.defineProperty 监听到数据变化, 就根据依赖关系, 派发更新</p>\n<h2 id=\"vue中的key到底有什么用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue中的key到底有什么用\" aria-hidden=\"true\">#</a> Vue中的key到底有什么用？</h2>\n<p><code>key</code> 是为 Vue 中的虚拟 DOM 节点（vNode）标记唯⼀性的 id。</p>\n<p>作用:  给虚拟dom添加标识,  <strong>(优化复用对比策略, 优化渲染性能)</strong></p>\n<p>主要考察:</p>\n<ol>\n<li>\n<p>vue 的更新机制 (差异化更新) 对比新旧虚拟dom 进行更新视图</p>\n<p>为什么对比虚拟dom, 而不对比真实的dom ? 真实的dom太复杂, 对比起来性能太差</p>\n</li>\n<li>\n<p>虚拟dom: 使用 js 对象的方式, 模拟真实的 dom 结构</p>\n<p>属性的量大大的减少了, 没有真实dom的那么多无效的属性, 对比起来性能高很多</p>\n</li>\n<li>\n<p>diff 算法: 默认的对比(diff) 机制,  同层兄弟元素, 是按照下标进行对比的, 但是加了 key,  <strong>就相当于给虚拟dom加了个标识</strong></p>\n<p>对比策略, 就是对相同key的元素进行对比了, 在列表v-for中, key的使用尤为常见, 可以用于优化渲染性能</p>\n</li>\n</ol>\n<h3 id=\"diff算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#diff算法\" aria-hidden=\"true\">#</a> diff算法</h3>\n<p>diff 算法的基本策略 (对比新旧虚拟dom差异的一种算法):</p>\n<ol>\n<li>\n<p>由于dom结构是一个树形结构, 就算是对比新旧虚拟dom, 一样是在对比树形结构</p>\n<p>而树形结构, 每往下都一层, 遍历成本就越高</p>\n</li>\n<li>\n<p>为了避免一些无效的对比, diff算法, (tree diff) 优先比较树的根节点</p>\n<p>如果根节点元素类型(组件), 是一致的, 才考虑复用元素内部的结构</p>\n<p>如果根节点元素类型(组件), 不一致, 直接销毁, 重新构建新的结构</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>旧\n&lt;div>\n\t&lt;span>我是内容&lt;/span>\n&lt;/div>\n\n\n新\n&lt;li>\n\t&lt;a href=\"#\">我是内容&lt;/a>\n\t&lt;span>我是内容&lt;/span>\n&lt;/li>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>大大的提升了对比的效率</p>\n</li>\n<li>\n<p>同一根节点下,   同级兄弟元素, 默认的对比策略: 按照下标对比</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>旧\n&lt;div class=\"box\">\n\t&lt;h1>大标题&lt;/h1>\n\t&lt;p>内容&lt;/p>\n&lt;/div>\n\n新\n&lt;div class=\"message\">\n\t&lt;h1>测试标题&lt;/h1>\n\t&lt;p>内容&lt;/p>\n&lt;/div>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div></li>\n<li>\n<p>同一根节点下,   同级兄弟元素,  如果配置 key 属性, 那么对比的策略, 就不是按照下标, 而是按照key进行 一一对比</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>旧\n&lt;div class=\"box\">\n\t&lt;h1 key=\"201\">大标题&lt;/h1>\n\t&lt;p key=\"202\">内容&lt;/p>\n&lt;/div>\n\n新\n&lt;div class=\"message\">\n\t&lt;h1 key=\"200\">大标题&lt;/h1>   // 新结构\n\t&lt;p key=\"202\">内容&lt;/p>    // 对比出来, 原来结构有key=\"202\", 进行对比, 完成了复用\n&lt;/div>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>如果你希望一个结构, 并不进行复用, 就是希望某个组件某个结构,  能够重新构建, 可以设置一个不同的 key</p>\n</li>\n</ol>\n<h3 id=\"key的常见应用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#key的常见应用场景\" aria-hidden=\"true\">#</a> key的常见应用场景</h3>\n<p>key 的常见应用场景 =&gt; v-for,  v-for 遍历的列表中的项的顺序, 非常的容易改变</p>\n<p>1 往后面加, 默认的对比策略, 按照下标,  没有任何问题</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// 旧</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">张三</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">李四</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 新</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">张三</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">李四</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">王五</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p>2 往前面加, 由于下标变了, 如果按照之前的下标对比, 元素是混乱的, 策略: 加上key</p>\n<p>​    一旦加上了key, 就是按照 key 进行新旧dom的对比了</p>\n<div class=\"language-jsx ext-jsx line-numbers-mode\"><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// 旧 </span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>17<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">张三</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>31<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">李四</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 新  [ { id: 17, name: '张三' }, ... ]</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>52<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">王五</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>17<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">张三</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>31<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">李四</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p><strong>总结: key 就是给 虚拟dom 添加了一个 标识, 优化了对比策略!!!</strong></p>\n<h1 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\" aria-hidden=\"true\">#</a> React</h1>\n<h2 id=\"react最新的生命周期是怎么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react最新的生命周期是怎么样的\" aria-hidden=\"true\">#</a> React最新的生命周期是怎么样的？</h2>\n<p>在 React 16 版本中，三个之前的生命周期被标识为废弃，并在 React 17 中计划全部删除它们：</p>\n<ul>\n<li>\n<p>componentWillMount</p>\n</li>\n<li>\n<p>componentWillReceiveProps</p>\n</li>\n<li>\n<p>componentWillUpdate</p>\n</li>\n</ul>\n<p>当它们被删除后，将会只保留三个添加了<code>UNSAVE_</code>前缀的函数版本，作为向下兼容用途。因此我们在新项目中，要尽量避免使用这几个生命周期而使用最新的生命周期函数。</p>\n<p>⽬前 React 16.8+ 的⽣命周期分为三个阶段：挂载阶段、更新阶段、卸载阶段。</p>\n<p><strong>挂载阶段</strong></p>\n<p><code>constructor</code> ：组件的构造函数，它会最先被执⾏，我们通常在构造函数⾥初始化 <code>state</code> 状态对象、或给⾃定义⽅法绑定 <code>this</code></p>\n<p><code>getDerivedStateFromProps</code> ：这是个静态⽅法，当我们接收到新的属性后想要去修改 <code>state</code> 时可以使用</p>\n<p><code>render</code>：这是个只返回需要渲染内容的纯函数，不要包含其它的业务逻辑，可以返回原⽣的 DOM、React 组件、Fragment、Portals、字符串和数字、Boolean 值 和 null 值等内容</p>\n<p><code>componentDidMount</code> ：在组件装载后被调⽤，此时可以获取 DOM 节点并操作，对服务器的请求、订阅等操作都可以写在这个地方，但记得要在 <code>componentWillUnmount</code> 中取消订阅，即释放资源</p>\n<p><strong>更新阶段</strong></p>\n<p><code>getDerivedStateFromProps</code> ：此⽅法在更新个挂载阶段都可能会调⽤</p>\n<p><code>shouldComponentUpdate</code> ：该函数有两个参数 <code>nextProps</code> 和 <code>nextState</code>，表示新的属性和变化之后的状态；它返回⼀个布尔值，<code>true</code> 表示会触发重新渲染，<code>false</code> 则表示不会触发重新渲染，默认返回 <code>true</code>。我们通常利⽤该⽣命周期来优化 React 程序的性能</p>\n<p><code>render</code> ：更新阶段也会触发此⽣命周期</p>\n<p><code>getSnapshotBeforeUpdate</code> ：该⽅法在 <code>render</code> 之后、在 <code>componentDidUpdate</code> 之前被调⽤，它有两个参数 <code>prevProps</code> 和<code>prevState</code>，表示之前的属性和状态，并且该函数有⼀个返回值，返回值会作为第三个参数传给 <code>componentDidUpdate</code> ，如果不想要返回值则返回 <code>null</code> 即可。该⽣命周期必须与 <code>componentDidUpdate</code> 搭配使⽤</p>\n<p><code>componentDidUpdate</code> ：该⽅法在 <code>getSnapshotBeforeUpdate</code> ⽅法之后被调⽤，它有三个参数 <code>prevProps</code> 、<code>prevState</code> 、<code>snapshot</code> ，表示之前的属性、之前的状态、以及<code>snapshot</code>。第三个参数是 <code>getSnapshotBeforeUpdate</code> 所返回的，如果触发某些回调函数时需要⽤到 DOM 元素的状态，则将对⽐或计算的过程迁移⾄ <code>getSnapshotBeforeUpdate</code>，然后在 <code>componentDidUpdate</code> 中统⼀触发回调或更新状态</p>\n<p><strong>卸载阶段</strong></p>\n<p><code>componentWillUnmount</code> ：当组件被卸载或销毁时就会被调⽤，我们可以在这个函数⾥去做一些释放资源的操作，如：清除定时器、取消⽹络请求、清理⽆效的 DOM 元素等</p>\n<p><a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener noreferrer\">React生命周期图形示意工具<ExternalLinkIcon/></a></p>\n<h2 id=\"在react中网络请求应该放在哪个生命周期中发起\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在react中网络请求应该放在哪个生命周期中发起\" aria-hidden=\"true\">#</a> 在React中网络请求应该放在哪个生命周期中发起？</h2>\n<p>有人认为 React 中的网络异步请求，应该放在 <code>componentWillMount</code> 这个生命周期函数中发起，这样可以提前进⾏异步请求，以避免⽩屏现象。其实这个观点是有问题的。</p>\n<p>由于 JavaScript 中异步事件的性质，当进行异步 API 调⽤时，浏览器会在此期间继续执⾏其他⼯作。因此，当 React 渲染⼀个组件时，它并不会等待 <code>componentWillMount</code> 执行完成任何事情，而是继续往前执行并继续做 <code>render</code> ，没有办法 “暂停” 渲染以等待远程数据的返回。</p>\n<p>⽽且，在 <code>componentWillMount</code> 中发起请求会存在⼀系列潜在问题：</p>\n<ul>\n<li>\n<p>在用 React 作为服务器渲染（SSR）时，如果在 <code>componentWillMount</code> 中进行数据的获取，则 <code>fetch data</code> 会执⾏两次：⼀次在服务端，⼀次在客户端，这就造成了多余的请求</p>\n</li>\n<li>\n<p>在 React 16 使用 React Fiber 架构重写后，<code>componentWillMount</code> 可能会在⼀次渲染中被多次调⽤。</p>\n</li>\n</ul>\n<p><strong>⽬前官⽅推荐的是在 <code>componentDidmount</code> 中进行异步请求。</strong></p>\n<p>如遇到特殊需求，需要提前进行数据的请求，可考虑采用在 <code>constructor</code> 中进行。</p>\n<p>另外，由于在 React 17 之后 <code>componentWillMount</code> 被废弃仅保留 <code>UNSAFE_componentWillMount</code>，所以要慎用该生命周期。</p>\n<h2 id=\"setstate是同步的还是异步的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setstate是同步的还是异步的\" aria-hidden=\"true\">#</a> setState是同步的还是异步的？</h2>\n<p>答案是：有时表现出异步，有时表现出同步！</p>\n<ul>\n<li>在合成事件和生命周期钩⼦函数中是异步的</li>\n<li>在原⽣事件和 <code>setTimeout</code> 中是同步的</li>\n</ul>\n<p><code>setState</code> 的异步并不是指内部由异步代码实现。其实，它本身执⾏的过程及代码都是同步的，只是由于合成事件和钩⼦函数的调⽤顺序在更新之前，因此导致了在合成事件和钩⼦函数中没法立刻拿到更新后的值，所以形成了所谓的异步。</p>\n<p>当然，我们可以通过使用第⼆个参数来拿到更新后的结果，它是个回调函数：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>此外，<code>setState</code> 的批量更新优化也是建⽴在异步（合成事件、钩⼦函数）之上的，在原⽣事件和 <code>setTimeout</code> 中不会批量更新。在异步中，如果对同⼀个值进⾏多次 <code>setState</code>，则它的批量更新策略会对其进⾏覆盖，只取最后⼀次的执⾏。如果同时 <code>setState</code> 多个不同的值，则会在更新时对其进⾏合并批量更新。</p>\n<h2 id=\"react中如何实现组件间的通信\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react中如何实现组件间的通信\" aria-hidden=\"true\">#</a> React中如何实现组件间的通信？</h2>\n<p>组件间通信⽅式一共有如下几种：</p>\n<ol>\n<li>⽗组件向⼦组件通讯</li>\n</ol>\n<p>⽗组件可以通过向⼦组件传 <code>props</code> 的⽅式来实现父到子的通讯。</p>\n<ol start=\"2\">\n<li>⼦组件向⽗组件通讯</li>\n</ol>\n<p>可以采用 <code>props + 回调</code> 的⽅式。</p>\n<p>当⽗组件向⼦组件传递 <code>props</code> 进⾏通讯时，可在该 <code>props</code> 中传递一个回调函数，当⼦组件调⽤该函数时，可将⼦组件中想要传递给父组件的信息作为参数传递给该函数。由于 <code>props</code> 中的函数作⽤域为⽗组件⾃身，因此可以通过该函数内的 <code>setState</code> 更新到⽗组件上。</p>\n<ol start=\"3\">\n<li>兄弟组件通信</li>\n</ol>\n<p>可以通过兄弟节点的共同⽗节点，再结合以上2种⽅式，由⽗节点转发信息，实现兄弟间通信。</p>\n<ol start=\"4\">\n<li>跨层级通信</li>\n</ol>\n<p>可以采用 React 中的 <code>Context</code> 来实现跨越多层的全局数据通信。</p>\n<p><code>Context</code> 设计的⽬的是为在⼀个组件树中共享 “全局” 数据，如：当前已登录的⽤户、界面主题、界面语⾔等信息。</p>\n<ol start=\"5\">\n<li>发布订阅模式</li>\n</ol>\n<p>发布者发布事件，订阅者监听到事件后做出反应。</p>\n<p>我们可以通过引⼊ <code>event</code> 模块进⾏此种方式的通信。</p>\n<ol start=\"6\">\n<li>全局状态管理⼯具</li>\n</ol>\n<p>可以借助 <code>Redux</code> 或 <code>Mobx</code> 等全局状态管理⼯具进⾏通信，它们会维护⼀个全局状态中⼼（Store），并可以根据不同的事件产⽣新的状态。</p>\n<img src=\"/images/image-20210223093430679.png\" alt=\"image-20210223093430679\" style=\"zoom:30%;\" /> \n<h2 id=\"react存在哪些性能优化手段\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react存在哪些性能优化手段\" aria-hidden=\"true\">#</a> React存在哪些性能优化手段？</h2>\n<p>前端项目的性能手段，其实都是相通的。我们可以参考文章：<a href=\"https://blog.csdn.net/weixin_33976072/article/details/93168109\" target=\"_blank\" rel=\"noopener noreferrer\">前端性能优化<ExternalLinkIcon/></a></p>\n<h2 id=\"react中如何进行组件和逻辑的复用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react中如何进行组件和逻辑的复用\" aria-hidden=\"true\">#</a> React中如何进行组件和逻辑的复用？</h2>\n<p>React 中的组件抽象的技术有以下几种:</p>\n<ul>\n<li>\n<p>混合（mixin，官方已废弃）</p>\n</li>\n<li>\n<p>⾼阶组件（hoc）：属性代理、反向继承</p>\n</li>\n<li>\n<p>渲染属性（render props）</p>\n</li>\n<li>\n<p>React Hooks（配合函数式组件使用，函数拆分的复用理念）</p>\n</li>\n</ul>\n<h2 id=\"mixin、hoc、render-props、react-hooks的优缺点分别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mixin、hoc、render-props、react-hooks的优缺点分别是什么\" aria-hidden=\"true\">#</a> Mixin、HoC、Render props、React Hooks的优缺点分别是什么？</h2>\n<p><strong>Mixin</strong></p>\n<ul>\n<li>\n<p>组件与 Mixin 之间存在隐式依赖（Mixin 经常依赖于组件的特定⽅法，但在定义组件时并不知道这种依赖关系）</p>\n</li>\n<li>\n<p>多个 Mixin 之间可能产⽣冲突，⽐如：多个 Mixin 中定义了相同的 state 字段，在一个组件中同时引入这些 Mixin 后会产生字段冲突</p>\n</li>\n<li>\n<p>Mixin 倾向于增加更多状态，这降低了应⽤的可预测性，状态越多越难管理和溯源，复杂度剧增</p>\n</li>\n<li>\n<p>隐式依赖导致依赖关系不透明，维护成本和理解成本迅速攀升：</p>\n<ul>\n<li>\n<p>难以快速理解组件的⾏为，需要全盘了解所有依赖 Mixin 的扩展⾏为及其之间的相互影响</p>\n</li>\n<li>\n<p>33333组件⾃身的⽅法和 state 字段不敢轻易删改，因为难以确定有没有 Mixin 依赖它</p>\n</li>\n<li>\n<p>Mixin 也难以维护，因为 Mixin 逻辑最后会被摊平合并到⼀起，很难搞清楚⼀个 Mixin 的输⼊输出</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>HoC</strong></p>\n<p>优点：</p>\n<p>相⽐ Mixin，HoC 通过外层组件传递 props 来影响内层组件的状态，⽽不是直接改变其 state，这就不存在冲突和互相⼲扰，降低了耦合度。不同于 Mixin 的打平 + 合并，HoC 天然具有层级结构（组件树结构），这⼜降低了复杂度。</p>\n<p>缺点：</p>\n<ul>\n<li>\n<p>扩展性限制：HoC ⽆法从外部访问⼦组件的 state，因此⽆法通过 <code>shouldComponentUpdate</code> 滤掉不必要的更新；React 在⽀持ES6 Class 之后提供了 <code>React.PureComponent</code> 解决了这个问题</p>\n</li>\n<li>\n<p>Ref 传递问题：Ref 被隔断。后来出现了 <code>React.forwardRef</code> 来解决了这个问题</p>\n</li>\n<li>\n<p>包装地狱（Wrapper Hell）：和回调函数类似，HoC 如果出现多层包裹组件的情况，就会和回调函数一样层层嵌套；而这种多层抽象同样也增加了复杂度和理解成本</p>\n</li>\n<li>\n<p>命名冲突：如果⾼阶组件多次嵌套而没有使⽤命名空间，就可能会产⽣冲突，覆盖⽼的属性</p>\n</li>\n<li>\n<p>不可⻅性：HoC 相当于在原有组件外层再包装⼀个组件，你有可能压根都不知道外层的包装是什么，对于你来说完全是⿊盒</p>\n</li>\n</ul>\n<p><strong>Render Props</strong></p>\n<p>优点：</p>\n<p>上述所说的 HoC 缺点，使用 Render Props 都可得到解决。</p>\n<p>缺点：</p>\n<ul>\n<li>\n<p>使⽤繁琐：HoC 使⽤只需要借助装饰器语法，通常⼀⾏代码就可以进⾏复⽤，而 Render Props ⽆法做到如此简单</p>\n</li>\n<li>\n<p>嵌套过深：Render Props 虽然摆脱了组件多层嵌套问题，但其又会走回到了回调函数的嵌套问题</p>\n</li>\n</ul>\n<p><strong>React Hooks</strong></p>\n<p>优点：</p>\n<ul>\n<li>\n<p>简洁：React Hooks 解决了 HoC 和 Render Props 的嵌套问题，代码更加简洁</p>\n</li>\n<li>\n<p>解耦：React Hooks 可以更⽅便地把 UI 和状态分离，做到更彻底的解耦</p>\n</li>\n<li>\n<p>组合：Hooks 中可以通过引⽤另外的 Hooks 以此形成新的 Hooks，变化丰富</p>\n</li>\n<li>\n<p>函数友好：React Hooks 为函数组件⽽⽣，从⽽解决了类组件的⼏⼤问题:</p>\n<ul>\n<li>\n<p>this 指向容易错误</p>\n</li>\n<li>\n<p>分割在不同声明周期中的逻辑会使得代码难以理解和维护</p>\n</li>\n<li>\n<p>代码复⽤成本⾼（⾼阶组件容易使代码量剧增）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>\n<p>有额外的学习成本（需要学习和区分类组件、函数组件）</p>\n</li>\n<li>\n<p>写法上有限制（不能出现在条件、循环中），并且这种写法限制会增加代码重构时的成本</p>\n</li>\n<li>\n<p>破坏了 <code>PureComponent</code>、<code>React.memo</code> 浅⽐较的性能优化效果（为了获取最新的 props 和 state，每次 <code>render()</code> 都要重新</p>\n</li>\n</ul>\n<p>创建事件处理函数）</p>\n<ul>\n<li>在闭包场景中可能会引⽤到旧的 state、props 值</li>\n<li>内部实现上不直观（依赖⼀份可变的全局状态，不再那么“纯”）</li>\n<li><code>React.memo</code> 并不能完全替代 <code>shouldComponentUpdate</code>（因为获取不到 state 的变化，只针对 props 的变化）</li>\n</ul>\n<h2 id=\"redux的工作流程是怎么样的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#redux的工作流程是怎么样的\" aria-hidden=\"true\">#</a> Redux的工作流程是怎么样的？</h2>\n<p><strong>核心概念</strong></p>\n<ul>\n<li>\n<p><code>Store</code>：一个保存数据的容器，整个应⽤只有⼀个 Store</p>\n</li>\n<li>\n<p><code>State</code>：Store 对象内包含所有数据，如想得到某一时间点的数据，就要对 Store ⽣成快照，这种时间点的数据集合，就叫 State</p>\n</li>\n<li>\n<p><code>Action</code>：State 的变化会导致 View 的变化，但⽤户是接触不到 State 的，只能接触到 View，所以 State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发⽣变化了</p>\n</li>\n<li>\n<p><code>Action Creator</code>：View 要发送多少种消息，就需要有多少种 Action，如果都⼿写会比较麻烦，因此我们通常会定义一个用于生成 Action 的函数，该函数就被称为 Action Creator</p>\n</li>\n<li>\n<p><code>Reducer</code>：在 Store 收到 Action 以后，必须给出⼀个新的 State，这样 View 才会发⽣变化。这种 State 的计算过程就叫做Reducer。Reducer 是⼀个函数，它接收 Action 和当前 State 作为参数，返回值是⼀个新的 State</p>\n</li>\n<li>\n<p><code>dispatch</code>：是 View 发送 Action 的唯⼀⽅法</p>\n</li>\n</ul>\n<p><strong>⼯作流程</strong></p>\n<img src=\"/images/image-20210223103127034.png\" alt=\"image-20210223103127034\" style=\"zoom:90%;\" />\n<p>⼀次⽤户交互的流程如下：</p>\n<ol>\n<li>\n<p>⾸先，View（通过⽤户）发出 Action，发出⽅式就是使用 <code>dispatch</code> ⽅法</p>\n</li>\n<li>\n<p>然后，Store 调⽤ Reducer 并且传⼊两个参数（当前的 State 和收到的 Action），Reducer 处理后返回新的 State</p>\n</li>\n<li>\n<p>State ⼀旦有变化，则 Store 会调⽤监听函数来通知 View 进行更新</p>\n</li>\n</ol>\n<p>注意，在整个流程中，数据都是单向流动的，我们称之为单向数据流，这种⽅式可以保证流程的清晰性。</p>\n<h2 id=\"react-redux这个库是如何工作的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react-redux这个库是如何工作的\" aria-hidden=\"true\">#</a> react-redux这个库是如何工作的？</h2>\n<p><strong>核心概念</strong></p>\n<p><strong><code>Provider</code></strong></p>\n<p>Provider 的作⽤是从最外部封装了整个应⽤，并向 <code>connect</code> 模块传递 <code>store</code> 。</p>\n<p><strong><code>connect</code></strong></p>\n<p>负责将 React 和 Redux 关联起来，它的作用主要如下：</p>\n<ul>\n<li>\n<p>获取 <code>state</code>：<code>connect</code> 先通过 <code>context</code> 来获取存放在 <code>Provider</code> 中的 <code>store</code>，然后通过 <code>store.getState()</code> 来获取整个 <code>store tree</code> 上所存放的 <code>state</code></p>\n</li>\n<li>\n<p>包装原组件：<code>connect</code> 将 <code>state</code> 和 <code>action</code> 通过 <code>props</code> 传⼊到原组件的内部，并调用 <code>wrapWithConnect</code> 函数来包装和返回⼀个 <code>Connect</code> 对象，<code>Connect</code> 对象重新 <code>render</code> 外部传⼊的原组件，并把 <code>connect</code> 中传⼊的 <code>mapStateToProps</code> 和 <code>mapDispatchToProps</code> 与组件原有的 <code>props</code> 合并后，通过属性的⽅式传给包装组件</p>\n</li>\n<li>\n<p>监听 <code>store tree</code> 变化：<code>connect</code> 缓存了 <code>store tree</code> 中 <code>state</code> 的状态，通过对比当前 <code>state </code> 和变更前 <code>state</code>，确定是否需要调⽤ <code>this.setState()</code> ⽅法，以此触发 <code>Connect</code> 及其⼦组件的重新渲染</p>\n</li>\n</ul>\n<p><strong>流程图</strong></p>\n<p><img src=\"https://ooszy.cco.vin/img/blog-public/ljz.gif\" alt=\"image-20210223104924017\" originSrc=\"/images/image-20210223104924017.png\" data=\"aurora\"></p>\n<h2 id=\"redux和mobx的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#redux和mobx的区别\" aria-hidden=\"true\">#</a> Redux和Mobx的区别？</h2>\n<table>\n<thead>\n<tr>\n<th>比较点</th>\n<th>Redux</th>\n<th>Mobx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储方式</td>\n<td>保存在单⼀的 store 中</td>\n<td>保存在分散的多个 store 中</td>\n</tr>\n<tr>\n<td>数据结构</td>\n<td>使⽤ plain object 保存数据，需要⼿动处理变化后的操作</td>\n<td>使⽤ observable 保存数据，数据变化后⾃动处理响应的操作（类似 Vuex）</td>\n</tr>\n<tr>\n<td>数据可变性</td>\n<td>不可变状态，只读不能直接修改，应使⽤纯函数返回⼀个新状态</td>\n<td>状态是可变的，可直接进⾏修改</td>\n</tr>\n<tr>\n<td>难易度</td>\n<td>比较复杂<br />涉及函数式编程思想，掌握起来不那么容易，同时需借助⼀些中间件处理异步和副作⽤</td>\n<td>比较简单<br />使用面向对象的编程思维</td>\n</tr>\n<tr>\n<td>调试</td>\n<td>容易<br />使用纯函数，并提供了时间回溯⼯具，因此调试直观方便</td>\n<td>⽐较困难<br />有更多的对象抽象和封装，调试会⽐较困难</td>\n</tr>\n</tbody>\n</table>\n<p><strong>使⽤场景</strong></p>\n<p><code>Mobx</code></p>\n<ul>\n<li>\n<p>更适合数据不复杂的应⽤。因为 mobx 难以调试，很多状态⽆法回溯，⾯对复杂度⾼的应⽤时往往⼒不从⼼</p>\n</li>\n<li>\n<p>适合短平快的项⽬。因为 mobx上⼿简单，样板代码少，很⼤程度上提⾼了开发效率</p>\n</li>\n</ul>\n<p><code>Redux</code></p>\n<ul>\n<li>适合有回溯需求的应⽤。⽐如，画板、表格等应⽤，一般有撤销、重做等操作，由于 Redux 具有不可变的特性，天然⽀持这些操作</li>\n</ul>\n<p>我们也可以在一个项目中同时使用 <code>Mobx</code> 和 <code>Redux</code> ，让两者发挥各自的长处，比如：</p>\n<ul>\n<li>使用 <code>Redux</code> 作为全局状态管理</li>\n<li>使⽤ <code>Mobx </code>作为组件的局部状态管理器</li>\n</ul>\n<h2 id=\"在redux中如何进行异步操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在redux中如何进行异步操作\" aria-hidden=\"true\">#</a> 在Redux中如何进行异步操作？</h2>\n<p>一般项目中，我们可以直接在 <code>componentDidMount</code> 中进⾏异步操作，比如发送网络请求，⽆须借助 Redux。但如果我们的项目上了一定的规模，这种方法再管理异步流的时候就比较困难。这个时候，我们会借助 Redux 的异步中间件来进⾏异步处理。</p>\n<p>Redux 其实有多种异步中间件，但当下主流的只有两种：<code>redux-thunk</code> 和 <code>redux-saga</code>。</p>\n<p><strong>redux-thunk</strong></p>\n<p>优点：</p>\n<ul>\n<li>\n<p>体积⼩：redux-thunk 的实现⽅式很简单，只有不到20⾏代码</p>\n</li>\n<li>\n<p>使⽤简单：redux-thunk 没有引⼊像 redux-saga 或者 redux-observable 额外的编程范式，上⼿非常简单</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>\n<p>样板代码过多：与 redux 本身⼀样，通常发送⼀个请求就需要编写⼤量代码，⽽且很多都是重复性的</p>\n</li>\n<li>\n<p>耦合严重：异步操作与 redux 的 action 偶合在⼀起，不⽅便管理</p>\n</li>\n<li>\n<p>功能薄弱：实际开发中常⽤的⼀些功能都需要⾃⼰封装</p>\n</li>\n</ul>\n<p><strong>redux-saga</strong></p>\n<p>优点：</p>\n<ul>\n<li>\n<p>异步解耦：异步操作被被转移到了单独的 saga.js 中，不再是掺杂在 action.js 或 component.js 中</p>\n</li>\n<li>\n<p>action 摆脱了 thunk function：dispatch 的参数依然是⼀个纯粹的 action (FSA)，⽽不是充满了 “⿊魔法” 的 thunk function</p>\n</li>\n<li>\n<p>异常处理：受益于 Generator Function 的 saga 实现，代码异常/请求失败都可直接通过 try/catch 捕获处理</p>\n</li>\n<li>\n<p>功能强⼤：redux-saga 提供了⼤量的 Saga 辅助函数和 Effect 创建器，开发者⽆须自行封装、或只要简单封装即可使⽤</p>\n</li>\n<li>\n<p>灵活：redux-saga 可将多个 Saga 进行串⾏或并⾏组合，形成⼀个⾮常实⽤的异步流程</p>\n</li>\n<li>\n<p>易测试：提供了各种测试⽅案，包括 mock task、分⽀覆盖等</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>\n<p>额外的学习成本：redux-saga 不仅使⽤了难以理解的 Generator Function，⽽且存在数⼗个 API，学习成本远超 redux-thunk；最重要的是，这些额外的学习成本只能用于使用这个库的（而对于 redux-observable 来说，它虽也有学习成本，但它基于 rxjs ，这套编程思想和技术体系可以沿用到其他地方去）</p>\n</li>\n<li>\n<p>体积庞⼤：代码近 2000 ⾏（压缩后大约 25KB）</p>\n</li>\n<li>\n<p>功能过剩：其中提供的并发控制等功能，实际开发中很难会⽤到，但我们依然要引⼊这些代码</p>\n</li>\n<li>\n<p>对 TS ⽀持不友好：yield ⽆法返回 TS 类型</p>\n</li>\n</ul>\n<p><strong>redux-observable</strong></p>\n<p>优点：</p>\n<ul>\n<li>\n<p>功能最强：由于基于 rxjs 这个强⼤的响应式编程库，借助 rxjs 的操作符⼏乎可以做任何你能想到的异步处理</p>\n</li>\n<li>\n<p>知识沿用：如果你已学习过 rxjs，那么 redux-observable 的学习成本并不⾼；⽽且，随着 rxjs 的升级，redux-observable 也会变得更强⼤</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>\n<p>学习成本奇⾼：对于还不会 rxjs 的开发者来说，需要额外的学习两个都较为复杂的库</p>\n</li>\n<li>\n<p>社区⼀般：redux-observable 下载量只有 redux-saga 的 1/5，社区不够活跃，而 redux-saga 仍处于领导地位</p>\n</li>\n</ul>\n","export * from \"-!../../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./前端面试手册.html.vue?vue&type=template&id=6265c214\"","import { ssrRender } from \"./前端面试手册.html.vue?vue&type=template&id=6265c214\"\nconst script = {}\n\nimport exportComponent from \"D:\\\\桌面文件\\\\Blog\\\\blog-demo\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__"],"names":[],"sourceRoot":""}